/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _SYS_MMAN_H: u32 = 1;
pub const MAP_32BIT: u32 = 64;
pub const MAP_GROWSDOWN: u32 = 256;
pub const MAP_DENYWRITE: u32 = 2048;
pub const MAP_EXECUTABLE: u32 = 4096;
pub const MAP_LOCKED: u32 = 8192;
pub const MAP_NORESERVE: u32 = 16384;
pub const MAP_POPULATE: u32 = 32768;
pub const MAP_NONBLOCK: u32 = 65536;
pub const MAP_STACK: u32 = 131072;
pub const MAP_HUGETLB: u32 = 262144;
pub const MAP_SYNC: u32 = 524288;
pub const MAP_FIXED_NOREPLACE: u32 = 1048576;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const PROT_NONE: u32 = 0;
pub const PROT_GROWSDOWN: u32 = 16777216;
pub const PROT_GROWSUP: u32 = 33554432;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_SHARED_VALIDATE: u32 = 3;
pub const MAP_TYPE: u32 = 15;
pub const MAP_FIXED: u32 = 16;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANONYMOUS: u32 = 32;
pub const MAP_ANON: u32 = 32;
pub const MAP_HUGE_SHIFT: u32 = 26;
pub const MAP_HUGE_MASK: u32 = 63;
pub const MS_ASYNC: u32 = 1;
pub const MS_SYNC: u32 = 4;
pub const MS_INVALIDATE: u32 = 2;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 8;
pub const MADV_REMOVE: u32 = 9;
pub const MADV_DONTFORK: u32 = 10;
pub const MADV_DOFORK: u32 = 11;
pub const MADV_MERGEABLE: u32 = 12;
pub const MADV_UNMERGEABLE: u32 = 13;
pub const MADV_HUGEPAGE: u32 = 14;
pub const MADV_NOHUGEPAGE: u32 = 15;
pub const MADV_DONTDUMP: u32 = 16;
pub const MADV_DODUMP: u32 = 17;
pub const MADV_WIPEONFORK: u32 = 18;
pub const MADV_KEEPONFORK: u32 = 19;
pub const MADV_COLD: u32 = 20;
pub const MADV_PAGEOUT: u32 = 21;
pub const MADV_POPULATE_READ: u32 = 22;
pub const MADV_POPULATE_WRITE: u32 = 23;
pub const MADV_HWPOISON: u32 = 100;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MCL_ONFAULT: u32 = 4;
pub const __X32_SYSCALL_BIT: u32 = 1073741824;
pub const __NR_read: u32 = 0;
pub const __NR_write: u32 = 1;
pub const __NR_open: u32 = 2;
pub const __NR_close: u32 = 3;
pub const __NR_stat: u32 = 4;
pub const __NR_fstat: u32 = 5;
pub const __NR_lstat: u32 = 6;
pub const __NR_poll: u32 = 7;
pub const __NR_lseek: u32 = 8;
pub const __NR_mmap: u32 = 9;
pub const __NR_mprotect: u32 = 10;
pub const __NR_munmap: u32 = 11;
pub const __NR_brk: u32 = 12;
pub const __NR_rt_sigaction: u32 = 13;
pub const __NR_rt_sigprocmask: u32 = 14;
pub const __NR_rt_sigreturn: u32 = 15;
pub const __NR_ioctl: u32 = 16;
pub const __NR_pread64: u32 = 17;
pub const __NR_pwrite64: u32 = 18;
pub const __NR_readv: u32 = 19;
pub const __NR_writev: u32 = 20;
pub const __NR_access: u32 = 21;
pub const __NR_pipe: u32 = 22;
pub const __NR_select: u32 = 23;
pub const __NR_sched_yield: u32 = 24;
pub const __NR_mremap: u32 = 25;
pub const __NR_msync: u32 = 26;
pub const __NR_mincore: u32 = 27;
pub const __NR_madvise: u32 = 28;
pub const __NR_shmget: u32 = 29;
pub const __NR_shmat: u32 = 30;
pub const __NR_shmctl: u32 = 31;
pub const __NR_dup: u32 = 32;
pub const __NR_dup2: u32 = 33;
pub const __NR_pause: u32 = 34;
pub const __NR_nanosleep: u32 = 35;
pub const __NR_getitimer: u32 = 36;
pub const __NR_alarm: u32 = 37;
pub const __NR_setitimer: u32 = 38;
pub const __NR_getpid: u32 = 39;
pub const __NR_sendfile: u32 = 40;
pub const __NR_socket: u32 = 41;
pub const __NR_connect: u32 = 42;
pub const __NR_accept: u32 = 43;
pub const __NR_sendto: u32 = 44;
pub const __NR_recvfrom: u32 = 45;
pub const __NR_sendmsg: u32 = 46;
pub const __NR_recvmsg: u32 = 47;
pub const __NR_shutdown: u32 = 48;
pub const __NR_bind: u32 = 49;
pub const __NR_listen: u32 = 50;
pub const __NR_getsockname: u32 = 51;
pub const __NR_getpeername: u32 = 52;
pub const __NR_socketpair: u32 = 53;
pub const __NR_setsockopt: u32 = 54;
pub const __NR_getsockopt: u32 = 55;
pub const __NR_clone: u32 = 56;
pub const __NR_fork: u32 = 57;
pub const __NR_vfork: u32 = 58;
pub const __NR_execve: u32 = 59;
pub const __NR_exit: u32 = 60;
pub const __NR_wait4: u32 = 61;
pub const __NR_kill: u32 = 62;
pub const __NR_uname: u32 = 63;
pub const __NR_semget: u32 = 64;
pub const __NR_semop: u32 = 65;
pub const __NR_semctl: u32 = 66;
pub const __NR_shmdt: u32 = 67;
pub const __NR_msgget: u32 = 68;
pub const __NR_msgsnd: u32 = 69;
pub const __NR_msgrcv: u32 = 70;
pub const __NR_msgctl: u32 = 71;
pub const __NR_fcntl: u32 = 72;
pub const __NR_flock: u32 = 73;
pub const __NR_fsync: u32 = 74;
pub const __NR_fdatasync: u32 = 75;
pub const __NR_truncate: u32 = 76;
pub const __NR_ftruncate: u32 = 77;
pub const __NR_getdents: u32 = 78;
pub const __NR_getcwd: u32 = 79;
pub const __NR_chdir: u32 = 80;
pub const __NR_fchdir: u32 = 81;
pub const __NR_rename: u32 = 82;
pub const __NR_mkdir: u32 = 83;
pub const __NR_rmdir: u32 = 84;
pub const __NR_creat: u32 = 85;
pub const __NR_link: u32 = 86;
pub const __NR_unlink: u32 = 87;
pub const __NR_symlink: u32 = 88;
pub const __NR_readlink: u32 = 89;
pub const __NR_chmod: u32 = 90;
pub const __NR_fchmod: u32 = 91;
pub const __NR_chown: u32 = 92;
pub const __NR_fchown: u32 = 93;
pub const __NR_lchown: u32 = 94;
pub const __NR_umask: u32 = 95;
pub const __NR_gettimeofday: u32 = 96;
pub const __NR_getrlimit: u32 = 97;
pub const __NR_getrusage: u32 = 98;
pub const __NR_sysinfo: u32 = 99;
pub const __NR_times: u32 = 100;
pub const __NR_ptrace: u32 = 101;
pub const __NR_getuid: u32 = 102;
pub const __NR_syslog: u32 = 103;
pub const __NR_getgid: u32 = 104;
pub const __NR_setuid: u32 = 105;
pub const __NR_setgid: u32 = 106;
pub const __NR_geteuid: u32 = 107;
pub const __NR_getegid: u32 = 108;
pub const __NR_setpgid: u32 = 109;
pub const __NR_getppid: u32 = 110;
pub const __NR_getpgrp: u32 = 111;
pub const __NR_setsid: u32 = 112;
pub const __NR_setreuid: u32 = 113;
pub const __NR_setregid: u32 = 114;
pub const __NR_getgroups: u32 = 115;
pub const __NR_setgroups: u32 = 116;
pub const __NR_setresuid: u32 = 117;
pub const __NR_getresuid: u32 = 118;
pub const __NR_setresgid: u32 = 119;
pub const __NR_getresgid: u32 = 120;
pub const __NR_getpgid: u32 = 121;
pub const __NR_setfsuid: u32 = 122;
pub const __NR_setfsgid: u32 = 123;
pub const __NR_getsid: u32 = 124;
pub const __NR_capget: u32 = 125;
pub const __NR_capset: u32 = 126;
pub const __NR_rt_sigpending: u32 = 127;
pub const __NR_rt_sigtimedwait: u32 = 128;
pub const __NR_rt_sigqueueinfo: u32 = 129;
pub const __NR_rt_sigsuspend: u32 = 130;
pub const __NR_sigaltstack: u32 = 131;
pub const __NR_utime: u32 = 132;
pub const __NR_mknod: u32 = 133;
pub const __NR_uselib: u32 = 134;
pub const __NR_personality: u32 = 135;
pub const __NR_ustat: u32 = 136;
pub const __NR_statfs: u32 = 137;
pub const __NR_fstatfs: u32 = 138;
pub const __NR_sysfs: u32 = 139;
pub const __NR_getpriority: u32 = 140;
pub const __NR_setpriority: u32 = 141;
pub const __NR_sched_setparam: u32 = 142;
pub const __NR_sched_getparam: u32 = 143;
pub const __NR_sched_setscheduler: u32 = 144;
pub const __NR_sched_getscheduler: u32 = 145;
pub const __NR_sched_get_priority_max: u32 = 146;
pub const __NR_sched_get_priority_min: u32 = 147;
pub const __NR_sched_rr_get_interval: u32 = 148;
pub const __NR_mlock: u32 = 149;
pub const __NR_munlock: u32 = 150;
pub const __NR_mlockall: u32 = 151;
pub const __NR_munlockall: u32 = 152;
pub const __NR_vhangup: u32 = 153;
pub const __NR_modify_ldt: u32 = 154;
pub const __NR_pivot_root: u32 = 155;
pub const __NR__sysctl: u32 = 156;
pub const __NR_prctl: u32 = 157;
pub const __NR_arch_prctl: u32 = 158;
pub const __NR_adjtimex: u32 = 159;
pub const __NR_setrlimit: u32 = 160;
pub const __NR_chroot: u32 = 161;
pub const __NR_sync: u32 = 162;
pub const __NR_acct: u32 = 163;
pub const __NR_settimeofday: u32 = 164;
pub const __NR_mount: u32 = 165;
pub const __NR_umount2: u32 = 166;
pub const __NR_swapon: u32 = 167;
pub const __NR_swapoff: u32 = 168;
pub const __NR_reboot: u32 = 169;
pub const __NR_sethostname: u32 = 170;
pub const __NR_setdomainname: u32 = 171;
pub const __NR_iopl: u32 = 172;
pub const __NR_ioperm: u32 = 173;
pub const __NR_create_module: u32 = 174;
pub const __NR_init_module: u32 = 175;
pub const __NR_delete_module: u32 = 176;
pub const __NR_get_kernel_syms: u32 = 177;
pub const __NR_query_module: u32 = 178;
pub const __NR_quotactl: u32 = 179;
pub const __NR_nfsservctl: u32 = 180;
pub const __NR_getpmsg: u32 = 181;
pub const __NR_putpmsg: u32 = 182;
pub const __NR_afs_syscall: u32 = 183;
pub const __NR_tuxcall: u32 = 184;
pub const __NR_security: u32 = 185;
pub const __NR_gettid: u32 = 186;
pub const __NR_readahead: u32 = 187;
pub const __NR_setxattr: u32 = 188;
pub const __NR_lsetxattr: u32 = 189;
pub const __NR_fsetxattr: u32 = 190;
pub const __NR_getxattr: u32 = 191;
pub const __NR_lgetxattr: u32 = 192;
pub const __NR_fgetxattr: u32 = 193;
pub const __NR_listxattr: u32 = 194;
pub const __NR_llistxattr: u32 = 195;
pub const __NR_flistxattr: u32 = 196;
pub const __NR_removexattr: u32 = 197;
pub const __NR_lremovexattr: u32 = 198;
pub const __NR_fremovexattr: u32 = 199;
pub const __NR_tkill: u32 = 200;
pub const __NR_time: u32 = 201;
pub const __NR_futex: u32 = 202;
pub const __NR_sched_setaffinity: u32 = 203;
pub const __NR_sched_getaffinity: u32 = 204;
pub const __NR_set_thread_area: u32 = 205;
pub const __NR_io_setup: u32 = 206;
pub const __NR_io_destroy: u32 = 207;
pub const __NR_io_getevents: u32 = 208;
pub const __NR_io_submit: u32 = 209;
pub const __NR_io_cancel: u32 = 210;
pub const __NR_get_thread_area: u32 = 211;
pub const __NR_lookup_dcookie: u32 = 212;
pub const __NR_epoll_create: u32 = 213;
pub const __NR_epoll_ctl_old: u32 = 214;
pub const __NR_epoll_wait_old: u32 = 215;
pub const __NR_remap_file_pages: u32 = 216;
pub const __NR_getdents64: u32 = 217;
pub const __NR_set_tid_address: u32 = 218;
pub const __NR_restart_syscall: u32 = 219;
pub const __NR_semtimedop: u32 = 220;
pub const __NR_fadvise64: u32 = 221;
pub const __NR_timer_create: u32 = 222;
pub const __NR_timer_settime: u32 = 223;
pub const __NR_timer_gettime: u32 = 224;
pub const __NR_timer_getoverrun: u32 = 225;
pub const __NR_timer_delete: u32 = 226;
pub const __NR_clock_settime: u32 = 227;
pub const __NR_clock_gettime: u32 = 228;
pub const __NR_clock_getres: u32 = 229;
pub const __NR_clock_nanosleep: u32 = 230;
pub const __NR_exit_group: u32 = 231;
pub const __NR_epoll_wait: u32 = 232;
pub const __NR_epoll_ctl: u32 = 233;
pub const __NR_tgkill: u32 = 234;
pub const __NR_utimes: u32 = 235;
pub const __NR_vserver: u32 = 236;
pub const __NR_mbind: u32 = 237;
pub const __NR_set_mempolicy: u32 = 238;
pub const __NR_get_mempolicy: u32 = 239;
pub const __NR_mq_open: u32 = 240;
pub const __NR_mq_unlink: u32 = 241;
pub const __NR_mq_timedsend: u32 = 242;
pub const __NR_mq_timedreceive: u32 = 243;
pub const __NR_mq_notify: u32 = 244;
pub const __NR_mq_getsetattr: u32 = 245;
pub const __NR_kexec_load: u32 = 246;
pub const __NR_waitid: u32 = 247;
pub const __NR_add_key: u32 = 248;
pub const __NR_request_key: u32 = 249;
pub const __NR_keyctl: u32 = 250;
pub const __NR_ioprio_set: u32 = 251;
pub const __NR_ioprio_get: u32 = 252;
pub const __NR_inotify_init: u32 = 253;
pub const __NR_inotify_add_watch: u32 = 254;
pub const __NR_inotify_rm_watch: u32 = 255;
pub const __NR_migrate_pages: u32 = 256;
pub const __NR_openat: u32 = 257;
pub const __NR_mkdirat: u32 = 258;
pub const __NR_mknodat: u32 = 259;
pub const __NR_fchownat: u32 = 260;
pub const __NR_futimesat: u32 = 261;
pub const __NR_newfstatat: u32 = 262;
pub const __NR_unlinkat: u32 = 263;
pub const __NR_renameat: u32 = 264;
pub const __NR_linkat: u32 = 265;
pub const __NR_symlinkat: u32 = 266;
pub const __NR_readlinkat: u32 = 267;
pub const __NR_fchmodat: u32 = 268;
pub const __NR_faccessat: u32 = 269;
pub const __NR_pselect6: u32 = 270;
pub const __NR_ppoll: u32 = 271;
pub const __NR_unshare: u32 = 272;
pub const __NR_set_robust_list: u32 = 273;
pub const __NR_get_robust_list: u32 = 274;
pub const __NR_splice: u32 = 275;
pub const __NR_tee: u32 = 276;
pub const __NR_sync_file_range: u32 = 277;
pub const __NR_vmsplice: u32 = 278;
pub const __NR_move_pages: u32 = 279;
pub const __NR_utimensat: u32 = 280;
pub const __NR_epoll_pwait: u32 = 281;
pub const __NR_signalfd: u32 = 282;
pub const __NR_timerfd_create: u32 = 283;
pub const __NR_eventfd: u32 = 284;
pub const __NR_fallocate: u32 = 285;
pub const __NR_timerfd_settime: u32 = 286;
pub const __NR_timerfd_gettime: u32 = 287;
pub const __NR_accept4: u32 = 288;
pub const __NR_signalfd4: u32 = 289;
pub const __NR_eventfd2: u32 = 290;
pub const __NR_epoll_create1: u32 = 291;
pub const __NR_dup3: u32 = 292;
pub const __NR_pipe2: u32 = 293;
pub const __NR_inotify_init1: u32 = 294;
pub const __NR_preadv: u32 = 295;
pub const __NR_pwritev: u32 = 296;
pub const __NR_rt_tgsigqueueinfo: u32 = 297;
pub const __NR_perf_event_open: u32 = 298;
pub const __NR_recvmmsg: u32 = 299;
pub const __NR_fanotify_init: u32 = 300;
pub const __NR_fanotify_mark: u32 = 301;
pub const __NR_prlimit64: u32 = 302;
pub const __NR_name_to_handle_at: u32 = 303;
pub const __NR_open_by_handle_at: u32 = 304;
pub const __NR_clock_adjtime: u32 = 305;
pub const __NR_syncfs: u32 = 306;
pub const __NR_sendmmsg: u32 = 307;
pub const __NR_setns: u32 = 308;
pub const __NR_getcpu: u32 = 309;
pub const __NR_process_vm_readv: u32 = 310;
pub const __NR_process_vm_writev: u32 = 311;
pub const __NR_kcmp: u32 = 312;
pub const __NR_finit_module: u32 = 313;
pub const __NR_sched_setattr: u32 = 314;
pub const __NR_sched_getattr: u32 = 315;
pub const __NR_renameat2: u32 = 316;
pub const __NR_seccomp: u32 = 317;
pub const __NR_getrandom: u32 = 318;
pub const __NR_memfd_create: u32 = 319;
pub const __NR_kexec_file_load: u32 = 320;
pub const __NR_bpf: u32 = 321;
pub const __NR_execveat: u32 = 322;
pub const __NR_userfaultfd: u32 = 323;
pub const __NR_membarrier: u32 = 324;
pub const __NR_mlock2: u32 = 325;
pub const __NR_copy_file_range: u32 = 326;
pub const __NR_preadv2: u32 = 327;
pub const __NR_pwritev2: u32 = 328;
pub const __NR_pkey_mprotect: u32 = 329;
pub const __NR_pkey_alloc: u32 = 330;
pub const __NR_pkey_free: u32 = 331;
pub const __NR_statx: u32 = 332;
pub const __NR_io_pgetevents: u32 = 333;
pub const __NR_rseq: u32 = 334;
pub const __NR_pidfd_send_signal: u32 = 424;
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
pub const __NR_open_tree: u32 = 428;
pub const __NR_move_mount: u32 = 429;
pub const __NR_fsopen: u32 = 430;
pub const __NR_fsconfig: u32 = 431;
pub const __NR_fsmount: u32 = 432;
pub const __NR_fspick: u32 = 433;
pub const __NR_pidfd_open: u32 = 434;
pub const __NR_clone3: u32 = 435;
pub const __NR_close_range: u32 = 436;
pub const __NR_openat2: u32 = 437;
pub const __NR_pidfd_getfd: u32 = 438;
pub const __NR_faccessat2: u32 = 439;
pub const __NR_process_madvise: u32 = 440;
pub const __NR_epoll_pwait2: u32 = 441;
pub const __NR_mount_setattr: u32 = 442;
pub const __NR_quotactl_fd: u32 = 443;
pub const __NR_landlock_create_ruleset: u32 = 444;
pub const __NR_landlock_add_rule: u32 = 445;
pub const __NR_landlock_restrict_self: u32 = 446;
pub const __NR_memfd_secret: u32 = 447;
pub const __NR_process_mrelease: u32 = 448;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _SEARCH_H: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _ERR_H: u32 = 1;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const PASSIVE_LEVEL: u32 = 0;
pub const APC_LEVEL: u32 = 1;
pub const DISPATCH_LEVEL: u32 = 2;
pub const DEVICE_LEVEL_BASE: u32 = 4;
pub const SOFT_IRQL: u32 = 5;
pub const DIRQL: u32 = 6;
pub const STATUS_WAIT_0: u32 = 0;
pub const STATUS_SUCCESS: u32 = 0;
pub const STATUS_ALERTED: u32 = 257;
pub const STATUS_TIMEOUT: u32 = 258;
pub const STATUS_PENDING: u32 = 259;
pub const STATUS_FAILURE: u32 = 3221225473;
pub const STATUS_NOT_IMPLEMENTED: u32 = 3221225474;
pub const STATUS_INVALID_PARAMETER: u32 = 3221225485;
pub const STATUS_INVALID_DEVICE_REQUEST: u32 = 3221225488;
pub const STATUS_MORE_PROCESSING_REQUIRED: u32 = 3221225494;
pub const STATUS_ACCESS_DENIED: u32 = 3221225506;
pub const STATUS_BUFFER_TOO_SMALL: u32 = 3221225507;
pub const STATUS_OBJECT_NAME_INVALID: u32 = 3221225507;
pub const STATUS_MUTANT_NOT_OWNED: u32 = 3221225542;
pub const STATUS_RESOURCES: u32 = 3221225626;
pub const STATUS_DELETE_PENDING: u32 = 3221225558;
pub const STATUS_INSUFFICIENT_RESOURCES: u32 = 3221225626;
pub const STATUS_NOT_SUPPORTED: u32 = 3221225659;
pub const STATUS_INVALID_PARAMETER_2: u32 = 3221225712;
pub const STATUS_NO_MEMORY: u32 = 3221225495;
pub const STATUS_CANCELLED: u32 = 3221225760;
pub const STATUS_DEVICE_REMOVED: u32 = 3221226166;
pub const STATUS_DEVICE_NOT_CONNECTED: u32 = 3221225629;
pub const STATUS_BUFFER_OVERFLOW: u32 = 2147483653;
pub const SL_PENDING_RETURNED: u32 = 1;
pub const SL_INVOKE_ON_CANCEL: u32 = 32;
pub const SL_INVOKE_ON_SUCCESS: u32 = 64;
pub const SL_INVOKE_ON_ERROR: u32 = 128;
pub const IRP_MJ_CREATE: u32 = 0;
pub const IRP_MJ_CREATE_NAMED_PIPE: u32 = 1;
pub const IRP_MJ_CLOSE: u32 = 2;
pub const IRP_MJ_READ: u32 = 3;
pub const IRP_MJ_WRITE: u32 = 4;
pub const IRP_MJ_DEVICE_CONTROL: u32 = 14;
pub const IRP_MJ_INTERNAL_DEVICE_CONTROL: u32 = 15;
pub const IRP_MJ_POWER: u32 = 22;
pub const IRP_MJ_SYSTEM_CONTROL: u32 = 14;
pub const IRP_MJ_PNP: u32 = 27;
pub const IRP_MJ_MAXIMUM_FUNCTION: u32 = 27;
pub const IRP_MN_WAIT_WAKE: u32 = 0;
pub const IRP_MN_POWER_SEQUENCE: u32 = 1;
pub const IRP_MN_SET_POWER: u32 = 2;
pub const IRP_MN_QUERY_POWER: u32 = 3;
pub const IRP_MN_REGINFO: u32 = 8;
pub const IRP_MN_REGINFO_EX: u32 = 11;
pub const IRP_MN_START_DEVICE: u32 = 0;
pub const IRP_MN_QUERY_REMOVE_DEVICE: u32 = 1;
pub const IRP_MN_REMOVE_DEVICE: u32 = 2;
pub const IRP_MN_CANCEL_REMOVE_DEVICE: u32 = 3;
pub const IRP_MN_STOP_DEVICE: u32 = 4;
pub const IRP_MN_QUERY_STOP_DEVICE: u32 = 5;
pub const IRP_MN_CANCEL_STOP_DEVICE: u32 = 6;
pub const IRP_MN_QUERY_DEVICE_RELATIONS: u32 = 7;
pub const IRP_MN_QUERY_INTERFACE: u32 = 8;
pub const IRP_BUFFERED_IO: u32 = 16;
pub const IRP_DEALLOCATE_BUFFER: u32 = 32;
pub const IRP_INPUT_OPERATION: u32 = 64;
pub const IRP_DEFFER_IO_COMPLETION: u32 = 2048;
pub const THREAD_WAIT_OBJECTS: u32 = 3;
pub const MAX_WAIT_OBJECTS: u32 = 64;
pub const LOW_PRIORITY: u32 = 0;
pub const LOW_REALTIME_PRIORITY: u32 = 16;
pub const HIGH_PRIORITY: u32 = 31;
pub const MAXIMUM_PRIORITY: u32 = 32;
pub const PROCESSOR_FEATURE_MAX: u32 = 64;
pub const IO_NO_INCREMENT: u32 = 0;
pub const WMIREG_ACTION_REGISTER: u32 = 1;
pub const WMIREG_ACTION_DEREGISTER: u32 = 2;
pub const WMIREG_ACTION_REREGISTER: u32 = 3;
pub const WMIREG_ACTION_UPDATE_GUIDS: u32 = 4;
pub const WMIREGISTER: u32 = 0;
pub const WMIUPDATE: u32 = 1;
pub const KI_USER_SHARED_DATA: u32 = 4292804608;
pub const MM_SHARED_USER_DATA_VA: u32 = 2147352576;
pub const MDL_MAPPED_TO_SYSTEM_VA: u32 = 1;
pub const MDL_PAGES_LOCKED: u32 = 2;
pub const MDL_SOURCE_IS_NONPAGED_POOL: u32 = 4;
pub const MDL_ALLOCATED_FIXED_SIZE: u32 = 8;
pub const MDL_PARTIAL: u32 = 16;
pub const MDL_PARTIAL_HAS_BEEN_MAPPED: u32 = 32;
pub const MDL_IO_PAGE_READ: u32 = 64;
pub const MDL_WRITE_OPERATION: u32 = 128;
pub const MDL_PARENT_MAPPED_SYSTEM_VA: u32 = 256;
pub const MDL_FREE_EXTRA_PTES: u32 = 512;
pub const MDL_IO_SPACE: u32 = 2048;
pub const MDL_NETWORK_HEADER: u32 = 4096;
pub const MDL_MAPPING_CAN_FAIL: u32 = 8192;
pub const MDL_ALLOCATED_MUST_SUCCEED: u32 = 16384;
pub const MDL_POOL_ALLOCATED: u32 = 1024;
pub const MDL_CACHE_ALLOCATED: u32 = 32768;
pub const WRAP_TIMER_MAGIC: u32 = 47697249;
pub const IO_TYPE_ADAPTER: u32 = 1;
pub const IO_TYPE_CONTROLLER: u32 = 2;
pub const IO_TYPE_DEVICE: u32 = 3;
pub const IO_TYPE_DRIVER: u32 = 4;
pub const IO_TYPE_FILE: u32 = 5;
pub const IO_TYPE_IRP: u32 = 6;
pub const IO_TYPE_DEVICE_OBJECT_EXTENSION: u32 = 13;
pub const CmResourceTypeNull: u32 = 0;
pub const CmResourceTypePort: u32 = 1;
pub const CmResourceTypeInterrupt: u32 = 2;
pub const CmResourceTypeMemory: u32 = 3;
pub const CmResourceTypeDma: u32 = 4;
pub const CmResourceTypeDeviceSpecific: u32 = 5;
pub const CmResourceTypeBusNumber: u32 = 6;
pub const CmResourceTypeMaximum: u32 = 7;
pub const CmResourceTypeNonArbitrated: u32 = 128;
pub const CmResourceTypeConfigData: u32 = 128;
pub const CmResourceTypeDevicePrivate: u32 = 129;
pub const CmResourceTypePcCardConfig: u32 = 130;
pub const CmResourceTypeMfCardConfig: u32 = 131;
pub const CM_RESOURCE_INTERRUPT_LEVEL_SENSITIVE: u32 = 0;
pub const CM_RESOURCE_INTERRUPT_LATCHED: u32 = 1;
pub const CM_RESOURCE_MEMORY_READ_WRITE: u32 = 0;
pub const CM_RESOURCE_MEMORY_READ_ONLY: u32 = 1;
pub const CM_RESOURCE_MEMORY_WRITE_ONLY: u32 = 2;
pub const CM_RESOURCE_MEMORY_PREFETCHABLE: u32 = 4;
pub const CM_RESOURCE_MEMORY_COMBINEDWRITE: u32 = 8;
pub const CM_RESOURCE_MEMORY_24: u32 = 16;
pub const CM_RESOURCE_MEMORY_CACHEABLE: u32 = 32;
pub const CM_RESOURCE_PORT_MEMORY: u32 = 0;
pub const CM_RESOURCE_PORT_IO: u32 = 1;
pub const CM_RESOURCE_PORT_10_BIT_DECODE: u32 = 4;
pub const CM_RESOURCE_PORT_12_BIT_DECODE: u32 = 8;
pub const CM_RESOURCE_PORT_16_BIT_DECODE: u32 = 16;
pub const CM_RESOURCE_PORT_POSITIVE_DECODE: u32 = 32;
pub const CM_RESOURCE_PORT_PASSIVE_DECODE: u32 = 64;
pub const CM_RESOURCE_PORT_WINDOW_DECODE: u32 = 128;
pub const CM_RESOURCE_DMA_8: u32 = 0;
pub const CM_RESOURCE_DMA_16: u32 = 1;
pub const CM_RESOURCE_DMA_32: u32 = 2;
pub const CM_RESOURCE_DMA_8_AND_16: u32 = 4;
pub const CM_RESOURCE_DMA_BUS_MASTER: u32 = 8;
pub const CM_RESOURCE_DMA_TYPE_A: u32 = 16;
pub const CM_RESOURCE_DMA_TYPE_B: u32 = 32;
pub const CM_RESOURCE_DMA_TYPE_F: u32 = 64;
pub const MAX_RESOURCES: u32 = 20;
pub const METHOD_BUFFERED: u32 = 0;
pub const METHOD_IN_DIRECT: u32 = 1;
pub const METHOD_OUT_DIRECT: u32 = 2;
pub const METHOD_NEITHER: u32 = 3;
pub const IRP_NOCACHE: u32 = 1;
pub const IRP_SYNCHRONOUS_API: u32 = 4;
pub const IRP_ASSOCIATED_IRP: u32 = 8;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
pub const MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
pub const SIZE_OF_80387_REGISTERS: u32 = 80;
pub const REG_NONE: u32 = 0;
pub const REG_SZ: u32 = 1;
pub const REG_EXPAND_SZ: u32 = 2;
pub const REG_BINARY: u32 = 3;
pub const REG_DWORD: u32 = 4;
pub const RTL_REGISTRY_ABSOLUTE: u32 = 0;
pub const RTL_REGISTRY_SERVICES: u32 = 1;
pub const RTL_REGISTRY_CONTROL: u32 = 2;
pub const RTL_REGISTRY_WINDOWS_NT: u32 = 3;
pub const RTL_REGISTRY_DEVICEMAP: u32 = 4;
pub const RTL_REGISTRY_USER: u32 = 5;
pub const RTL_REGISTRY_MAXIMUM: u32 = 6;
pub const RTL_REGISTRY_HANDLE: u32 = 1073741824;
pub const RTL_REGISTRY_OPTIONAL: u32 = 2147483648;
pub const RTL_QUERY_REGISTRY_SUBKEY: u32 = 1;
pub const RTL_QUERY_REGISTRY_TOPKEY: u32 = 2;
pub const RTL_QUERY_REGISTRY_REQUIRED: u32 = 4;
pub const RTL_QUERY_REGISTRY_NOVALUE: u32 = 8;
pub const RTL_QUERY_REGISTRY_NOEXPAND: u32 = 16;
pub const RTL_QUERY_REGISTRY_DIRECT: u32 = 32;
pub const RTL_QUERY_REGISTRY_DELETE: u32 = 64;
pub const DO_VERIFY_VOLUME: u32 = 2;
pub const DO_BUFFERED_IO: u32 = 4;
pub const DO_EXCLUSIVE: u32 = 8;
pub const DO_DIRECT_IO: u32 = 16;
pub const DO_MAP_IO_BUFFER: u32 = 32;
pub const DO_DEVICE_HAS_NAME: u32 = 64;
pub const DO_DEVICE_INITIALIZING: u32 = 128;
pub const DO_SYSTEM_BOOT_PARTITION: u32 = 256;
pub const DO_LONG_TERM_REQUESTS: u32 = 512;
pub const DO_NEVER_LAST_DEVICE: u32 = 1024;
pub const DO_SHUTDOWN_REGISTERED: u32 = 2048;
pub const DO_BUS_ENUMERATED_DEVICE: u32 = 4096;
pub const DO_POWER_PAGABLE: u32 = 8192;
pub const DO_POWER_INRUSH: u32 = 16384;
pub const DO_LOW_PRIORITY_FILESYSTEM: u32 = 65536;
pub const FILE_DEVICE_BEEP: u32 = 1;
pub const FILE_DEVICE_CD_ROM: u32 = 2;
pub const FILE_DEVICE_CD_ROM_FILE_SYSTEM: u32 = 3;
pub const FILE_DEVICE_CONTROLLER: u32 = 4;
pub const FILE_DEVICE_DATALINK: u32 = 5;
pub const FILE_DEVICE_DFS: u32 = 6;
pub const FILE_DEVICE_DISK: u32 = 7;
pub const FILE_DEVICE_DISK_FILE_SYSTEM: u32 = 8;
pub const FILE_DEVICE_FILE_SYSTEM: u32 = 9;
pub const FILE_DEVICE_INPORT_PORT: u32 = 10;
pub const FILE_DEVICE_KEYBOARD: u32 = 11;
pub const FILE_DEVICE_MAILSLOT: u32 = 12;
pub const FILE_DEVICE_MIDI_IN: u32 = 13;
pub const FILE_DEVICE_MIDI_OUT: u32 = 14;
pub const FILE_DEVICE_MOUSE: u32 = 15;
pub const FILE_DEVICE_MULTI_UNC_PROVIDER: u32 = 16;
pub const FILE_DEVICE_NAMED_PIPE: u32 = 17;
pub const FILE_DEVICE_NETWORK: u32 = 18;
pub const FILE_DEVICE_NETWORK_BROWSER: u32 = 19;
pub const FILE_DEVICE_NETWORK_FILE_SYSTEM: u32 = 20;
pub const FILE_DEVICE_NULL: u32 = 21;
pub const FILE_DEVICE_PARALLEL_PORT: u32 = 22;
pub const FILE_DEVICE_PHYSICAL_NETCARD: u32 = 23;
pub const FILE_DEVICE_PRINTER: u32 = 24;
pub const FILE_DEVICE_SCANNER: u32 = 25;
pub const FILE_DEVICE_SERIAL_MOUSE_PORT: u32 = 26;
pub const FILE_DEVICE_SERIAL_PORT: u32 = 27;
pub const FILE_DEVICE_SCREEN: u32 = 28;
pub const FILE_DEVICE_SOUND: u32 = 29;
pub const FILE_DEVICE_STREAMS: u32 = 30;
pub const FILE_DEVICE_TAPE: u32 = 31;
pub const FILE_DEVICE_TAPE_FILE_SYSTEM: u32 = 32;
pub const FILE_DEVICE_TRANSPORT: u32 = 33;
pub const FILE_DEVICE_UNKNOWN: u32 = 34;
pub const FILE_DEVICE_VIDEO: u32 = 35;
pub const FILE_DEVICE_VIRTUAL_DISK: u32 = 36;
pub const FILE_DEVICE_WAVE_IN: u32 = 37;
pub const FILE_DEVICE_WAVE_OUT: u32 = 38;
pub const FILE_DEVICE_8042_PORT: u32 = 39;
pub const FILE_DEVICE_NETWORK_REDIRECTOR: u32 = 40;
pub const FILE_DEVICE_BATTERY: u32 = 41;
pub const FILE_DEVICE_BUS_EXTENDER: u32 = 42;
pub const FILE_DEVICE_MODEM: u32 = 43;
pub const FILE_DEVICE_VDM: u32 = 44;
pub const FILE_DEVICE_MASS_STORAGE: u32 = 45;
pub const FILE_DEVICE_SMB: u32 = 46;
pub const FILE_DEVICE_KS: u32 = 47;
pub const FILE_DEVICE_CHANGER: u32 = 48;
pub const FILE_DEVICE_SMARTCARD: u32 = 49;
pub const FILE_DEVICE_ACPI: u32 = 50;
pub const FILE_DEVICE_DVD: u32 = 51;
pub const FILE_DEVICE_FULLSCREEN_VIDEO: u32 = 52;
pub const FILE_DEVICE_DFS_FILE_SYSTEM: u32 = 53;
pub const FILE_DEVICE_DFS_VOLUME: u32 = 54;
pub const FILE_DEVICE_SERENUM: u32 = 55;
pub const FILE_DEVICE_TERMSRV: u32 = 56;
pub const FILE_DEVICE_KSEC: u32 = 57;
pub const FILE_DEVICE_FIPS: u32 = 58;
pub const FILE_REMOVABLE_MEDIA: u32 = 1;
pub const FILE_READ_ONLY_DEVICE: u32 = 2;
pub const FILE_FLOPPY_DISKETTE: u32 = 4;
pub const FILE_WRITE_ONCE_MEDIA: u32 = 8;
pub const FILE_REMOTE_DEVICE: u32 = 16;
pub const FILE_DEVICE_IS_MOUNTED: u32 = 32;
pub const FILE_VIRTUAL_VOLUME: u32 = 64;
pub const FILE_AUTOGENERATED_DEVICE_NAME: u32 = 128;
pub const FILE_DEVICE_SECURE_OPEN: u32 = 256;
pub const FILE_READ_DATA: u32 = 1;
pub const FILE_WRITE_DATA: u32 = 2;
pub const FILE_SUPERSEDED: u32 = 0;
pub const FILE_OPENED: u32 = 1;
pub const FILE_CREATED: u32 = 2;
pub const FILE_OVERWRITTEN: u32 = 3;
pub const FILE_EXISTS: u32 = 4;
pub const FILE_DOES_NOT_EXIST: u32 = 5;
pub const IMAGE_DOS_SIGNATURE: u32 = 23117;
pub const IMAGE_OS2_SIGNATURE: u32 = 17742;
pub const IMAGE_OS2_SIGNATURE_LE: u32 = 17740;
pub const IMAGE_OS2_SIGNATURE_LX: u32 = 22604;
pub const IMAGE_VXD_SIGNATURE: u32 = 17740;
pub const IMAGE_NT_SIGNATURE: u32 = 17744;
pub const IMAGE_FILE_RELOCS_STRIPPED: u32 = 1;
pub const IMAGE_FILE_EXECUTABLE_IMAGE: u32 = 2;
pub const IMAGE_FILE_LINE_NUMS_STRIPPED: u32 = 4;
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: u32 = 8;
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: u32 = 16;
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: u32 = 32;
pub const IMAGE_FILE_16BIT_MACHINE: u32 = 64;
pub const IMAGE_FILE_BYTES_REVERSED_LO: u32 = 128;
pub const IMAGE_FILE_32BIT_MACHINE: u32 = 256;
pub const IMAGE_FILE_DEBUG_STRIPPED: u32 = 512;
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: u32 = 1024;
pub const IMAGE_FILE_NET_RUN_FROM_SWAP: u32 = 2048;
pub const IMAGE_FILE_SYSTEM: u32 = 4096;
pub const IMAGE_FILE_DLL: u32 = 8192;
pub const IMAGE_FILE_UP_SYSTEM_ONLY: u32 = 16384;
pub const IMAGE_FILE_BYTES_REVERSED_HI: u32 = 32768;
pub const IMAGE_FILE_MACHINE_UNKNOWN: u32 = 0;
pub const IMAGE_FILE_MACHINE_I860: u32 = 333;
pub const IMAGE_FILE_MACHINE_I386: u32 = 332;
pub const IMAGE_FILE_MACHINE_R3000: u32 = 354;
pub const IMAGE_FILE_MACHINE_R4000: u32 = 358;
pub const IMAGE_FILE_MACHINE_R10000: u32 = 360;
pub const IMAGE_FILE_MACHINE_WCEMIPSV2: u32 = 361;
pub const IMAGE_FILE_MACHINE_ALPHA: u32 = 388;
pub const IMAGE_FILE_MACHINE_SH3: u32 = 418;
pub const IMAGE_FILE_MACHINE_SH3DSP: u32 = 419;
pub const IMAGE_FILE_MACHINE_SH3E: u32 = 420;
pub const IMAGE_FILE_MACHINE_SH4: u32 = 422;
pub const IMAGE_FILE_MACHINE_SH5: u32 = 424;
pub const IMAGE_FILE_MACHINE_ARM: u32 = 448;
pub const IMAGE_FILE_MACHINE_THUMB: u32 = 450;
pub const IMAGE_FILE_MACHINE_AM33: u32 = 467;
pub const IMAGE_FILE_MACHINE_POWERPC: u32 = 496;
pub const IMAGE_FILE_MACHINE_POWERPCFP: u32 = 497;
pub const IMAGE_FILE_MACHINE_IA64: u32 = 512;
pub const IMAGE_FILE_MACHINE_MIPS16: u32 = 614;
pub const IMAGE_FILE_MACHINE_ALPHA64: u32 = 644;
pub const IMAGE_FILE_MACHINE_MIPSFPU: u32 = 870;
pub const IMAGE_FILE_MACHINE_MIPSFPU16: u32 = 1126;
pub const IMAGE_FILE_MACHINE_AXP64: u32 = 644;
pub const IMAGE_FILE_MACHINE_TRICORE: u32 = 1312;
pub const IMAGE_FILE_MACHINE_CEF: u32 = 3311;
pub const IMAGE_FILE_MACHINE_EBC: u32 = 3772;
pub const IMAGE_FILE_MACHINE_AMD64: u32 = 34404;
pub const IMAGE_FILE_MACHINE_M32R: u32 = 36929;
pub const IMAGE_FILE_MACHINE_CEE: u32 = 49390;
pub const IMAGE_SIZEOF_FILE_HEADER: u32 = 20;
pub const IMAGE_SIZEOF_ROM_OPTIONAL_HEADER: u32 = 56;
pub const IMAGE_SIZEOF_STD_OPTIONAL_HEADER: u32 = 28;
pub const IMAGE_SIZEOF_NT_OPTIONAL_HEADER32: u32 = 224;
pub const IMAGE_SIZEOF_NT_OPTIONAL_HEADER64: u32 = 240;
pub const IMAGE_SIZEOF_SHORT_NAME: u32 = 8;
pub const IMAGE_SIZEOF_SECTION_HEADER: u32 = 40;
pub const IMAGE_SIZEOF_SYMBOL: u32 = 18;
pub const IMAGE_SIZEOF_AUX_SYMBOL: u32 = 18;
pub const IMAGE_SIZEOF_RELOCATION: u32 = 10;
pub const IMAGE_SIZEOF_BASE_RELOCATION: u32 = 8;
pub const IMAGE_SIZEOF_LINENUMBER: u32 = 6;
pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: u32 = 60;
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: u32 = 267;
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: u32 = 523;
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: u32 = 263;
pub const IMAGE_SIZEOF_NT_OPTIONAL_HEADER: u32 = 224;
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: u32 = 267;
pub const IMAGE_FILE_EXPORT_DIRECTORY: u32 = 0;
pub const IMAGE_FILE_IMPORT_DIRECTORY: u32 = 1;
pub const IMAGE_FILE_RESOURCE_DIRECTORY: u32 = 2;
pub const IMAGE_FILE_EXCEPTION_DIRECTORY: u32 = 3;
pub const IMAGE_FILE_SECURITY_DIRECTORY: u32 = 4;
pub const IMAGE_FILE_BASE_RELOCATION_TABLE: u32 = 5;
pub const IMAGE_FILE_DEBUG_DIRECTORY: u32 = 6;
pub const IMAGE_FILE_DESCRIPTION_STRING: u32 = 7;
pub const IMAGE_FILE_MACHINE_VALUE: u32 = 8;
pub const IMAGE_FILE_THREAD_LOCAL_STORAGE: u32 = 9;
pub const IMAGE_FILE_CALLBACK_DIRECTORY: u32 = 10;
pub const IMAGE_DIRECTORY_ENTRY_EXPORT: u32 = 0;
pub const IMAGE_DIRECTORY_ENTRY_IMPORT: u32 = 1;
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: u32 = 2;
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: u32 = 3;
pub const IMAGE_DIRECTORY_ENTRY_SECURITY: u32 = 4;
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: u32 = 5;
pub const IMAGE_DIRECTORY_ENTRY_DEBUG: u32 = 6;
pub const IMAGE_DIRECTORY_ENTRY_COPYRIGHT: u32 = 7;
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: u32 = 8;
pub const IMAGE_DIRECTORY_ENTRY_TLS: u32 = 9;
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: u32 = 10;
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: u32 = 11;
pub const IMAGE_DIRECTORY_ENTRY_IAT: u32 = 12;
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: u32 = 13;
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: u32 = 14;
pub const IMAGE_SUBSYSTEM_UNKNOWN: u32 = 0;
pub const IMAGE_SUBSYSTEM_NATIVE: u32 = 1;
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: u32 = 2;
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: u32 = 3;
pub const IMAGE_SUBSYSTEM_OS2_CUI: u32 = 5;
pub const IMAGE_SUBSYSTEM_POSIX_CUI: u32 = 7;
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: u32 = 8;
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: u32 = 9;
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: u32 = 10;
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: u32 = 11;
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: u32 = 12;
pub const IMAGE_SUBSYSTEM_EFI_ROM: u32 = 13;
pub const IMAGE_SUBSYSTEM_XBOX: u32 = 14;
pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: u32 = 16;
pub const IMAGE_SCN_TYPE_NO_PAD: u32 = 8;
pub const IMAGE_SCN_CNT_CODE: u32 = 32;
pub const IMAGE_SCN_CNT_INITIALIZED_DATA: u32 = 64;
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: u32 = 128;
pub const IMAGE_SCN_LNK_OTHER: u32 = 256;
pub const IMAGE_SCN_LNK_INFO: u32 = 512;
pub const IMAGE_SCN_LNK_REMOVE: u32 = 2048;
pub const IMAGE_SCN_LNK_COMDAT: u32 = 4096;
pub const IMAGE_SCN_MEM_FARDATA: u32 = 32768;
pub const IMAGE_SCN_MEM_PURGEABLE: u32 = 131072;
pub const IMAGE_SCN_MEM_16BIT: u32 = 131072;
pub const IMAGE_SCN_MEM_LOCKED: u32 = 262144;
pub const IMAGE_SCN_MEM_PRELOAD: u32 = 524288;
pub const IMAGE_SCN_ALIGN_1BYTES: u32 = 1048576;
pub const IMAGE_SCN_ALIGN_2BYTES: u32 = 2097152;
pub const IMAGE_SCN_ALIGN_4BYTES: u32 = 3145728;
pub const IMAGE_SCN_ALIGN_8BYTES: u32 = 4194304;
pub const IMAGE_SCN_ALIGN_16BYTES: u32 = 5242880;
pub const IMAGE_SCN_ALIGN_32BYTES: u32 = 6291456;
pub const IMAGE_SCN_ALIGN_64BYTES: u32 = 7340032;
pub const IMAGE_SCN_ALIGN_128BYTES: u32 = 8388608;
pub const IMAGE_SCN_ALIGN_256BYTES: u32 = 9437184;
pub const IMAGE_SCN_ALIGN_512BYTES: u32 = 10485760;
pub const IMAGE_SCN_ALIGN_1024BYTES: u32 = 11534336;
pub const IMAGE_SCN_ALIGN_2048BYTES: u32 = 12582912;
pub const IMAGE_SCN_ALIGN_4096BYTES: u32 = 13631488;
pub const IMAGE_SCN_ALIGN_8192BYTES: u32 = 14680064;
pub const IMAGE_SCN_ALIGN_MASK: u32 = 15728640;
pub const IMAGE_SCN_LNK_NRELOC_OVFL: u32 = 16777216;
pub const IMAGE_SCN_MEM_DISCARDABLE: u32 = 33554432;
pub const IMAGE_SCN_MEM_NOT_CACHED: u32 = 67108864;
pub const IMAGE_SCN_MEM_NOT_PAGED: u32 = 134217728;
pub const IMAGE_SCN_MEM_SHARED: u32 = 268435456;
pub const IMAGE_SCN_MEM_EXECUTE: u32 = 536870912;
pub const IMAGE_SCN_MEM_READ: u32 = 1073741824;
pub const IMAGE_SCN_MEM_WRITE: u32 = 2147483648;
pub const IMAGE_SYM_TYPE_NULL: u32 = 0;
pub const IMAGE_SYM_TYPE_VOID: u32 = 1;
pub const IMAGE_SYM_TYPE_CHAR: u32 = 2;
pub const IMAGE_SYM_TYPE_SHORT: u32 = 3;
pub const IMAGE_SYM_TYPE_INT: u32 = 4;
pub const IMAGE_SYM_TYPE_LONG: u32 = 5;
pub const IMAGE_SYM_TYPE_FLOAT: u32 = 6;
pub const IMAGE_SYM_TYPE_DOUBLE: u32 = 7;
pub const IMAGE_SYM_TYPE_STRUCT: u32 = 8;
pub const IMAGE_SYM_TYPE_UNION: u32 = 9;
pub const IMAGE_SYM_TYPE_ENUM: u32 = 10;
pub const IMAGE_SYM_TYPE_MOE: u32 = 11;
pub const IMAGE_SYM_TYPE_BYTE: u32 = 12;
pub const IMAGE_SYM_TYPE_WORD: u32 = 13;
pub const IMAGE_SYM_TYPE_UINT: u32 = 14;
pub const IMAGE_SYM_TYPE_DWORD: u32 = 15;
pub const IMAGE_SYM_TYPE_PCODE: u32 = 32768;
pub const IMAGE_SYM_DTYPE_NULL: u32 = 0;
pub const IMAGE_SYM_DTYPE_POINTER: u32 = 1;
pub const IMAGE_SYM_DTYPE_FUNCTION: u32 = 2;
pub const IMAGE_SYM_DTYPE_ARRAY: u32 = 3;
pub const IMAGE_SYM_CLASS_NULL: u32 = 0;
pub const IMAGE_SYM_CLASS_AUTOMATIC: u32 = 1;
pub const IMAGE_SYM_CLASS_EXTERNAL: u32 = 2;
pub const IMAGE_SYM_CLASS_STATIC: u32 = 3;
pub const IMAGE_SYM_CLASS_REGISTER: u32 = 4;
pub const IMAGE_SYM_CLASS_EXTERNAL_DEF: u32 = 5;
pub const IMAGE_SYM_CLASS_LABEL: u32 = 6;
pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL: u32 = 7;
pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: u32 = 8;
pub const IMAGE_SYM_CLASS_ARGUMENT: u32 = 9;
pub const IMAGE_SYM_CLASS_STRUCT_TAG: u32 = 10;
pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION: u32 = 11;
pub const IMAGE_SYM_CLASS_UNION_TAG: u32 = 12;
pub const IMAGE_SYM_CLASS_TYPE_DEFINITION: u32 = 13;
pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC: u32 = 14;
pub const IMAGE_SYM_CLASS_ENUM_TAG: u32 = 15;
pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM: u32 = 16;
pub const IMAGE_SYM_CLASS_REGISTER_PARAM: u32 = 17;
pub const IMAGE_SYM_CLASS_BIT_FIELD: u32 = 18;
pub const IMAGE_SYM_CLASS_FAR_EXTERNAL: u32 = 68;
pub const IMAGE_SYM_CLASS_BLOCK: u32 = 100;
pub const IMAGE_SYM_CLASS_FUNCTION: u32 = 101;
pub const IMAGE_SYM_CLASS_END_OF_STRUCT: u32 = 102;
pub const IMAGE_SYM_CLASS_FILE: u32 = 103;
pub const IMAGE_SYM_CLASS_SECTION: u32 = 104;
pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL: u32 = 105;
pub const N_BTMASK: u32 = 15;
pub const N_TMASK: u32 = 48;
pub const N_TMASK1: u32 = 192;
pub const N_TMASK2: u32 = 240;
pub const N_BTSHFT: u32 = 4;
pub const N_TSHIFT: u32 = 2;
pub const IMAGE_COMDAT_SELECT_NODUPLICATES: u32 = 1;
pub const IMAGE_COMDAT_SELECT_ANY: u32 = 2;
pub const IMAGE_COMDAT_SELECT_SAME_SIZE: u32 = 3;
pub const IMAGE_COMDAT_SELECT_EXACT_MATCH: u32 = 4;
pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE: u32 = 5;
pub const IMAGE_COMDAT_SELECT_LARGEST: u32 = 6;
pub const IMAGE_COMDAT_SELECT_NEWEST: u32 = 7;
pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: u32 = 1;
pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: u32 = 2;
pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: u32 = 3;
pub const IMAGE_ORDINAL_FLAG32: u32 = 2147483648;
pub const IMAGE_ORDINAL_FLAG64: i64 = -9223372036854775808;
pub const IMAGE_ORDINAL_FLAG: u32 = 2147483648;
pub const IMAGE_REL_BASED_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_BASED_HIGH: u32 = 1;
pub const IMAGE_REL_BASED_LOW: u32 = 2;
pub const IMAGE_REL_BASED_HIGHLOW: u32 = 3;
pub const IMAGE_REL_BASED_HIGHADJ: u32 = 4;
pub const IMAGE_REL_BASED_MIPS_JMPADDR: u32 = 5;
pub const IMAGE_REL_BASED_SECTION: u32 = 6;
pub const IMAGE_REL_BASED_REL: u32 = 7;
pub const IMAGE_REL_BASED_MIPS_JMPADDR16: u32 = 9;
pub const IMAGE_REL_BASED_IA64_IMM64: u32 = 9;
pub const IMAGE_REL_BASED_DIR64: u32 = 10;
pub const IMAGE_REL_BASED_HIGH3ADJ: u32 = 11;
pub const IMAGE_REL_I386_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_I386_DIR16: u32 = 1;
pub const IMAGE_REL_I386_REL16: u32 = 2;
pub const IMAGE_REL_I386_DIR32: u32 = 6;
pub const IMAGE_REL_I386_DIR32NB: u32 = 7;
pub const IMAGE_REL_I386_SEG12: u32 = 9;
pub const IMAGE_REL_I386_SECTION: u32 = 10;
pub const IMAGE_REL_I386_SECREL: u32 = 11;
pub const IMAGE_REL_I386_REL32: u32 = 20;
pub const IMAGE_REL_MIPS_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_MIPS_REFHALF: u32 = 1;
pub const IMAGE_REL_MIPS_REFWORD: u32 = 2;
pub const IMAGE_REL_MIPS_JMPADDR: u32 = 3;
pub const IMAGE_REL_MIPS_REFHI: u32 = 4;
pub const IMAGE_REL_MIPS_REFLO: u32 = 5;
pub const IMAGE_REL_MIPS_GPREL: u32 = 6;
pub const IMAGE_REL_MIPS_LITERAL: u32 = 7;
pub const IMAGE_REL_MIPS_SECTION: u32 = 10;
pub const IMAGE_REL_MIPS_SECREL: u32 = 11;
pub const IMAGE_REL_MIPS_SECRELLO: u32 = 12;
pub const IMAGE_REL_MIPS_SECRELHI: u32 = 13;
pub const IMAGE_REL_MIPS_JMPADDR16: u32 = 16;
pub const IMAGE_REL_MIPS_REFWORDNB: u32 = 34;
pub const IMAGE_REL_MIPS_PAIR: u32 = 37;
pub const IMAGE_REL_ALPHA_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ALPHA_REFLONG: u32 = 1;
pub const IMAGE_REL_ALPHA_REFQUAD: u32 = 2;
pub const IMAGE_REL_ALPHA_GPREL: u32 = 3;
pub const IMAGE_REL_ALPHA_LITERAL: u32 = 4;
pub const IMAGE_REL_ALPHA_LITUSE: u32 = 5;
pub const IMAGE_REL_ALPHA_GPDISP: u32 = 6;
pub const IMAGE_REL_ALPHA_BRADDR: u32 = 7;
pub const IMAGE_REL_ALPHA_HINT: u32 = 8;
pub const IMAGE_REL_ALPHA_INLINE_REFLONG: u32 = 9;
pub const IMAGE_REL_ALPHA_REFHI: u32 = 10;
pub const IMAGE_REL_ALPHA_REFLO: u32 = 11;
pub const IMAGE_REL_ALPHA_PAIR: u32 = 12;
pub const IMAGE_REL_ALPHA_MATCH: u32 = 13;
pub const IMAGE_REL_ALPHA_SECTION: u32 = 14;
pub const IMAGE_REL_ALPHA_SECREL: u32 = 15;
pub const IMAGE_REL_ALPHA_REFLONGNB: u32 = 16;
pub const IMAGE_REL_ALPHA_SECRELLO: u32 = 17;
pub const IMAGE_REL_ALPHA_SECRELHI: u32 = 18;
pub const IMAGE_REL_ALPHA_REFQ3: u32 = 19;
pub const IMAGE_REL_ALPHA_REFQ2: u32 = 20;
pub const IMAGE_REL_ALPHA_REFQ1: u32 = 21;
pub const IMAGE_REL_ALPHA_GPRELLO: u32 = 22;
pub const IMAGE_REL_ALPHA_GPRELHI: u32 = 23;
pub const IMAGE_REL_PPC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_PPC_ADDR64: u32 = 1;
pub const IMAGE_REL_PPC_ADDR: u32 = 2;
pub const IMAGE_REL_PPC_ADDR24: u32 = 3;
pub const IMAGE_REL_PPC_ADDR16: u32 = 4;
pub const IMAGE_REL_PPC_ADDR14: u32 = 5;
pub const IMAGE_REL_PPC_REL24: u32 = 6;
pub const IMAGE_REL_PPC_REL14: u32 = 7;
pub const IMAGE_REL_PPC_TOCREL16: u32 = 8;
pub const IMAGE_REL_PPC_TOCREL14: u32 = 9;
pub const IMAGE_REL_PPC_ADDR32NB: u32 = 10;
pub const IMAGE_REL_PPC_SECREL: u32 = 11;
pub const IMAGE_REL_PPC_SECTION: u32 = 12;
pub const IMAGE_REL_PPC_IFGLUE: u32 = 13;
pub const IMAGE_REL_PPC_IMGLUE: u32 = 14;
pub const IMAGE_REL_PPC_SECREL16: u32 = 15;
pub const IMAGE_REL_PPC_REFHI: u32 = 16;
pub const IMAGE_REL_PPC_REFLO: u32 = 17;
pub const IMAGE_REL_PPC_PAIR: u32 = 18;
pub const IMAGE_REL_PPC_SECRELLO: u32 = 19;
pub const IMAGE_REL_PPC_SECRELHI: u32 = 20;
pub const IMAGE_REL_PPC_GPREL: u32 = 21;
pub const IMAGE_REL_PPC_TYPEMASK: u32 = 255;
pub const IMAGE_REL_PPC_NEG: u32 = 256;
pub const IMAGE_REL_PPC_BRTAKEN: u32 = 512;
pub const IMAGE_REL_PPC_BRNTAKEN: u32 = 1024;
pub const IMAGE_REL_PPC_TOCDEFN: u32 = 2048;
pub const IMAGE_REL_SH3_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_SH3_DIRECT16: u32 = 1;
pub const IMAGE_REL_SH3_DIRECT: u32 = 2;
pub const IMAGE_REL_SH3_DIRECT8: u32 = 3;
pub const IMAGE_REL_SH3_DIRECT8_WORD: u32 = 4;
pub const IMAGE_REL_SH3_DIRECT8_LONG: u32 = 5;
pub const IMAGE_REL_SH3_DIRECT4: u32 = 6;
pub const IMAGE_REL_SH3_DIRECT4_WORD: u32 = 7;
pub const IMAGE_REL_SH3_DIRECT4_LONG: u32 = 8;
pub const IMAGE_REL_SH3_PCREL8_WORD: u32 = 9;
pub const IMAGE_REL_SH3_PCREL8_LONG: u32 = 10;
pub const IMAGE_REL_SH3_PCREL12_WORD: u32 = 11;
pub const IMAGE_REL_SH3_STARTOF_SECTION: u32 = 12;
pub const IMAGE_REL_SH3_SIZEOF_SECTION: u32 = 13;
pub const IMAGE_REL_SH3_SECTION: u32 = 14;
pub const IMAGE_REL_SH3_SECREL: u32 = 15;
pub const IMAGE_REL_SH3_DIRECT32_NB: u32 = 16;
pub const IMAGE_REL_ARM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM_ADDR: u32 = 1;
pub const IMAGE_REL_ARM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM_BRANCH24: u32 = 3;
pub const IMAGE_REL_ARM_BRANCH11: u32 = 4;
pub const IMAGE_REL_ARM_SECTION: u32 = 14;
pub const IMAGE_REL_ARM_SECREL: u32 = 15;
pub const IMAGE_REL_IA64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_IA64_IMM14: u32 = 1;
pub const IMAGE_REL_IA64_IMM22: u32 = 2;
pub const IMAGE_REL_IA64_IMM64: u32 = 3;
pub const IMAGE_REL_IA64_DIR: u32 = 4;
pub const IMAGE_REL_IA64_DIR64: u32 = 5;
pub const IMAGE_REL_IA64_PCREL21B: u32 = 6;
pub const IMAGE_REL_IA64_PCREL21M: u32 = 7;
pub const IMAGE_REL_IA64_PCREL21F: u32 = 8;
pub const IMAGE_REL_IA64_GPREL22: u32 = 9;
pub const IMAGE_REL_IA64_LTOFF22: u32 = 10;
pub const IMAGE_REL_IA64_SECTION: u32 = 11;
pub const IMAGE_REL_IA64_SECREL22: u32 = 12;
pub const IMAGE_REL_IA64_SECREL64I: u32 = 13;
pub const IMAGE_REL_IA64_SECREL: u32 = 14;
pub const IMAGE_REL_IA64_LTOFF64: u32 = 15;
pub const IMAGE_REL_IA64_DIR32NB: u32 = 16;
pub const IMAGE_REL_IA64_RESERVED_11: u32 = 17;
pub const IMAGE_REL_IA64_RESERVED_12: u32 = 18;
pub const IMAGE_REL_IA64_RESERVED_13: u32 = 19;
pub const IMAGE_REL_IA64_RESERVED_14: u32 = 20;
pub const IMAGE_REL_IA64_RESERVED_15: u32 = 21;
pub const IMAGE_REL_IA64_RESERVED_16: u32 = 22;
pub const IMAGE_REL_IA64_ADDEND: u32 = 31;
pub const IMAGE_ARCHIVE_START_SIZE: u32 = 8;
pub const IMAGE_ARCHIVE_START: &[u8; 9] = b"!<arch>\n\0";
pub const IMAGE_ARCHIVE_END: &[u8; 3] = b"`\n\0";
pub const IMAGE_ARCHIVE_PAD: &[u8; 2] = b"\n\0";
pub const IMAGE_ARCHIVE_LINKER_MEMBER: &[u8; 17] = b"/               \0";
pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER: &[u8; 17] = b"//              \0";
pub const IMAGE_RESOURCE_NAME_IS_STRING: u32 = 2147483648;
pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY: u32 = 2147483648;
pub const LDT_READ: u32 = 0;
pub const LDT_WRITE: u32 = 1;
pub const WRAP_DRIVER_CLIENT_ID: u32 = 1;
pub const WRAP_PREEMPT: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
impl Default for __atomic_wide_counter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmap(
        __addr: *mut ::std::os::raw::c_void,
        __len: usize,
        __prot: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn munmap(__addr: *mut ::std::os::raw::c_void, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mprotect(
        __addr: *mut ::std::os::raw::c_void,
        __len: usize,
        __prot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msync(
        __addr: *mut ::std::os::raw::c_void,
        __len: usize,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madvise(
        __addr: *mut ::std::os::raw::c_void,
        __len: usize,
        __advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_madvise(
        __addr: *mut ::std::os::raw::c_void,
        __len: usize,
        __advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlock(__addr: *const ::std::os::raw::c_void, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlock(__addr: *const ::std::os::raw::c_void, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlockall(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlockall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mincore(
        __start: *mut ::std::os::raw::c_void,
        __len: usize,
        __vec: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_open(
        __name: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn insque(__elem: *mut ::std::os::raw::c_void, __prev: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn remque(__elem: *mut ::std::os::raw::c_void);
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_entry() {
    const UNINIT: ::std::mem::MaybeUninit<entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<entry>(),
        16usize,
        concat!("Size of: ", stringify!(entry))
    );
    assert_eq!(
        ::std::mem::align_of::<entry>(),
        8usize,
        concat!("Alignment of ", stringify!(entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(entry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(entry),
            "::",
            stringify!(data)
        )
    );
}
impl Default for entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ENTRY = entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENTRY {
    _unused: [u8; 0],
}
extern "C" {
    pub fn hsearch(__item: ENTRY, __action: ACTION) -> *mut ENTRY;
}
extern "C" {
    pub fn hcreate(__nel: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdestroy();
}
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
extern "C" {
    pub fn tsearch(
        __key: *const ::std::os::raw::c_void,
        __rootp: *mut *mut ::std::os::raw::c_void,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tfind(
        __key: *const ::std::os::raw::c_void,
        __rootp: *const *mut ::std::os::raw::c_void,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tdelete(
        __key: *const ::std::os::raw::c_void,
        __rootp: *mut *mut ::std::os::raw::c_void,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type __action_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        __nodep: *const ::std::os::raw::c_void,
        __value: VISIT,
        __level: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn twalk(__root: *const ::std::os::raw::c_void, __action: __action_fn_t);
}
extern "C" {
    pub fn lfind(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: *mut usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: *mut usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
extern "C" {
    pub fn warn(__format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarn(__format: *const ::std::os::raw::c_char, arg1: *mut __va_list_tag);
}
extern "C" {
    pub fn warnx(__format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnx(__format: *const ::std::os::raw::c_char, arg1: *mut __va_list_tag);
}
extern "C" {
    pub fn err(__status: ::std::os::raw::c_int, __format: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verr(
        __status: ::std::os::raw::c_int,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn errx(__status: ::std::os::raw::c_int, __format: *const ::std::os::raw::c_char, ...)
        -> !;
}
extern "C" {
    pub fn verrx(
        __status: ::std::os::raw::c_int,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> !;
}
pub type BOOLEAN = u8;
pub type BOOL = u8;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type BYTE = u8;
pub type PBYTE = *mut u8;
pub type LPBYTE = *mut u8;
pub type CHAR = i8;
pub type PCHAR = *mut ::std::os::raw::c_char;
pub type WCHAR = u16;
pub type LPSTR = *mut CHAR;
pub type LPCSTR = *const ::std::os::raw::c_char;
pub type LPWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type PWSTR = *mut WCHAR;
pub type UCHAR = u8;
pub type PUCHAR = *mut u8;
pub type SHORT = u16;
pub type USHORT = u16;
pub type PUSHORT = *mut u16;
pub type WORD = u16;
pub type INT = i32;
pub type UINT = u32;
pub type DWORD = u32;
pub type PDWORD = *mut u32;
pub type LONG = i32;
pub type ULONG = u32;
pub type PULONG = *mut u32;
pub type LONGLONG = i64;
pub type ULONGLONG = u64;
pub type PULONGLONG = *mut u64;
pub type ULONGULONG = u64;
pub type ULONG64 = u64;
pub type QWORD = u64;
pub type PQWORD = *mut u64;
pub type PWCHAR = *mut u16;
pub type PHANDLE = *mut PVOID;
pub type HRESULT = LONG;
pub type CCHAR = CHAR;
pub type CSHORT = SHORT;
pub type LARGE_INTEGER = LONGLONG;
pub type NTSTATUS = LONG;
pub type KPRIORITY = LONG;
pub type PHYSICAL_ADDRESS = LARGE_INTEGER;
pub type KIRQL = UCHAR;
pub type KPROCESSOR_MODE = CHAR;
pub type ULONG_PTR = ::std::os::raw::c_ulong;
pub type SIZE_T = usize;
pub type KAFFINITY = ULONG_PTR;
pub type ACCESS_MASK = ULONG;
pub type PFN_NUMBER = ULONG_PTR;
pub type SECURITY_INFORMATION = ULONG;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
#[test]
fn bindgen_test_layout__FILETIME() {
    const UNINIT: ::std::mem::MaybeUninit<_FILETIME> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FILETIME>(),
        8usize,
        concat!("Size of: ", stringify!(_FILETIME))
    );
    assert_eq!(
        ::std::mem::align_of::<_FILETIME>(),
        4usize,
        concat!("Alignment of ", stringify!(_FILETIME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwLowDateTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwLowDateTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwHighDateTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwHighDateTime)
        )
    );
}
pub type FILETIME = _FILETIME;
pub type PFILETIME = *mut _FILETIME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ansi_string {
    pub length: USHORT,
    pub max_length: USHORT,
    pub buf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ansi_string() {
    const UNINIT: ::std::mem::MaybeUninit<ansi_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ansi_string>(),
        16usize,
        concat!("Size of: ", stringify!(ansi_string))
    );
    assert_eq!(
        ::std::mem::align_of::<ansi_string>(),
        8usize,
        concat!("Alignment of ", stringify!(ansi_string))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ansi_string),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ansi_string),
            "::",
            stringify!(max_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ansi_string),
            "::",
            stringify!(buf)
        )
    );
}
impl Default for ansi_string {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ANSI_STRING = ansi_string;
pub type PANSI_STRING = *mut ansi_string;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unicode_string {
    pub Length: USHORT,
    pub MaximumLength: USHORT,
    pub Buffer: *mut wchar_t,
}
#[test]
fn bindgen_test_layout_unicode_string() {
    const UNINIT: ::std::mem::MaybeUninit<unicode_string> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unicode_string>(),
        16usize,
        concat!("Size of: ", stringify!(unicode_string))
    );
    assert_eq!(
        ::std::mem::align_of::<unicode_string>(),
        8usize,
        concat!("Alignment of ", stringify!(unicode_string))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unicode_string),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaximumLength) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unicode_string),
            "::",
            stringify!(MaximumLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unicode_string),
            "::",
            stringify!(Buffer)
        )
    );
}
impl Default for unicode_string {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type UNICODE_STRING = unicode_string;
pub type PUNICODE_STRING = *mut unicode_string;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_slist {
    pub next: *mut nt_slist,
}
#[test]
fn bindgen_test_layout_nt_slist() {
    const UNINIT: ::std::mem::MaybeUninit<nt_slist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_slist>(),
        8usize,
        concat!("Size of: ", stringify!(nt_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_slist),
            "::",
            stringify!(next)
        )
    );
}
impl Default for nt_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nt_slist_head {
    pub align: ULONGLONG,
    pub __bindgen_anon_1: nt_slist_head__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_slist_head__bindgen_ty_1 {
    pub next: *mut nt_slist,
    pub depth: USHORT,
    pub sequence: USHORT,
}
#[test]
fn bindgen_test_layout_nt_slist_head__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<nt_slist_head__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_slist_head__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(nt_slist_head__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_slist_head__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_slist_head__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_slist_head__bindgen_ty_1),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_slist_head__bindgen_ty_1),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_slist_head__bindgen_ty_1),
            "::",
            stringify!(sequence)
        )
    );
}
impl Default for nt_slist_head__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nt_slist_head() {
    const UNINIT: ::std::mem::MaybeUninit<nt_slist_head> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_slist_head>(),
        16usize,
        concat!("Size of: ", stringify!(nt_slist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_slist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_slist_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_slist_head),
            "::",
            stringify!(align)
        )
    );
}
impl Default for nt_slist_head {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nt_slist_header = nt_slist_head;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_list {
    pub next: *mut nt_list,
    pub prev: *mut nt_list,
}
#[test]
fn bindgen_test_layout_nt_list() {
    const UNINIT: ::std::mem::MaybeUninit<nt_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_list>(),
        16usize,
        concat!("Size of: ", stringify!(nt_list))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_list>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_list),
            "::",
            stringify!(prev)
        )
    );
}
impl Default for nt_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type NT_SPIN_LOCK = ULONG_PTR;
pub const kdpc_importance_LowImportance: kdpc_importance = 0;
pub const kdpc_importance_MediumImportance: kdpc_importance = 1;
pub const kdpc_importance_HighImportance: kdpc_importance = 2;
pub type kdpc_importance = ::std::os::raw::c_uint;
pub type DPC = ::std::option::Option<
    unsafe extern "C" fn(
        kdpc: *mut kdpc,
        ctx: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kdpc {
    pub type_: SHORT,
    pub nr_cpu: UCHAR,
    pub importance: UCHAR,
    pub list: nt_list,
    pub func: DPC,
    pub ctx: *mut ::std::os::raw::c_void,
    pub arg1: *mut ::std::os::raw::c_void,
    pub arg2: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_1: kdpc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kdpc__bindgen_ty_1 {
    pub lock: *mut NT_SPIN_LOCK,
    pub queued: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_kdpc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<kdpc__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kdpc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(kdpc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<kdpc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(kdpc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc__bindgen_ty_1),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queued) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc__bindgen_ty_1),
            "::",
            stringify!(queued)
        )
    );
}
impl Default for kdpc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_kdpc() {
    const UNINIT: ::std::mem::MaybeUninit<kdpc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kdpc>(),
        64usize,
        concat!("Size of: ", stringify!(kdpc))
    );
    assert_eq!(
        ::std::mem::align_of::<kdpc>(),
        8usize,
        concat!("Alignment of ", stringify!(kdpc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(nr_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).importance) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(importance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(kdpc), "::", stringify!(ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kdpc),
            "::",
            stringify!(arg2)
        )
    );
}
impl Default for kdpc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pool_type_NonPagedPool: pool_type = 0;
pub const pool_type_PagedPool: pool_type = 1;
pub const pool_type_NonPagedPoolMustSucceed: pool_type = 2;
pub const pool_type_DontUseThisType: pool_type = 3;
pub const pool_type_NonPagedPoolCacheAligned: pool_type = 4;
pub const pool_type_PagedPoolCacheAligned: pool_type = 5;
pub const pool_type_NonPagedPoolCacheAlignedMustS: pool_type = 6;
pub const pool_type_MaxPoolType: pool_type = 7;
pub const pool_type_NonPagedPoolSession: pool_type = 32;
pub const pool_type_PagedPoolSession: pool_type = 33;
pub const pool_type_NonPagedPoolMustSucceedSession: pool_type = 34;
pub const pool_type_DontUseThisTypeSession: pool_type = 35;
pub const pool_type_NonPagedPoolCacheAlignedSession: pool_type = 36;
pub const pool_type_PagedPoolCacheAlignedSession: pool_type = 37;
pub const pool_type_NonPagedPoolCacheAlignedMustSSession: pool_type = 38;
pub type pool_type = ::std::os::raw::c_uint;
pub const memory_caching_type_orig_MmFrameBufferCached: memory_caching_type_orig = 2;
pub type memory_caching_type_orig = ::std::os::raw::c_uint;
pub const memory_caching_type_MmNonCached: memory_caching_type = 0;
pub const memory_caching_type_MmCached: memory_caching_type = 1;
pub const memory_caching_type_MmWriteCombined: memory_caching_type = 2;
pub const memory_caching_type_MmHardwareCoherentCached: memory_caching_type = 3;
pub const memory_caching_type_MmNonCachedUnordered: memory_caching_type = 4;
pub const memory_caching_type_MmUSWCCached: memory_caching_type = 5;
pub const memory_caching_type_MmMaximumCacheType: memory_caching_type = 6;
pub type memory_caching_type = ::std::os::raw::c_uint;
pub const lock_operation_IoReadAccess: lock_operation = 0;
pub const lock_operation_IoWriteAccess: lock_operation = 1;
pub const lock_operation_IoModifyAccess: lock_operation = 2;
pub type lock_operation = ::std::os::raw::c_uint;
pub const mode_KernelMode: mode = 0;
pub const mode_UserMode: mode = 1;
pub const mode_MaximumMode: mode = 2;
pub type mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mdl {
    pub next: *mut mdl,
    pub size: CSHORT,
    pub flags: CSHORT,
    pub __bindgen_anon_1: mdl__bindgen_ty_1,
    pub mappedsystemva: *mut ::std::os::raw::c_void,
    pub startva: *mut ::std::os::raw::c_void,
    pub bytecount: ULONG,
    pub byteoffset: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mdl__bindgen_ty_1 {
    pub process: *mut ::std::os::raw::c_void,
    pub pool: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mdl__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mdl__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mdl__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mdl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mdl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mdl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl__bindgen_ty_1),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl__bindgen_ty_1),
            "::",
            stringify!(pool)
        )
    );
}
impl Default for mdl__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_mdl() {
    const UNINIT: ::std::mem::MaybeUninit<mdl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mdl>(),
        48usize,
        concat!("Size of: ", stringify!(mdl))
    );
    assert_eq!(
        ::std::mem::align_of::<mdl>(),
        8usize,
        concat!("Alignment of ", stringify!(mdl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mdl), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mdl), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mappedsystemva) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl),
            "::",
            stringify!(mappedsystemva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startva) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl),
            "::",
            stringify!(startva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytecount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl),
            "::",
            stringify!(bytecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteoffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mdl),
            "::",
            stringify!(byteoffset)
        )
    );
}
impl Default for mdl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kdevice_queue_entry {
    pub list: nt_list,
    pub sort_key: ULONG,
    pub inserted: BOOLEAN,
}
#[test]
fn bindgen_test_layout_kdevice_queue_entry() {
    const UNINIT: ::std::mem::MaybeUninit<kdevice_queue_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kdevice_queue_entry>(),
        24usize,
        concat!("Size of: ", stringify!(kdevice_queue_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<kdevice_queue_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(kdevice_queue_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue_entry),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sort_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue_entry),
            "::",
            stringify!(sort_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inserted) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue_entry),
            "::",
            stringify!(inserted)
        )
    );
}
impl Default for kdevice_queue_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kdevice_queue {
    pub type_: USHORT,
    pub size: USHORT,
    pub list: nt_list,
    pub lock: NT_SPIN_LOCK,
    pub busy: BOOLEAN,
}
#[test]
fn bindgen_test_layout_kdevice_queue() {
    const UNINIT: ::std::mem::MaybeUninit<kdevice_queue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kdevice_queue>(),
        40usize,
        concat!("Size of: ", stringify!(kdevice_queue))
    );
    assert_eq!(
        ::std::mem::align_of::<kdevice_queue>(),
        8usize,
        concat!("Alignment of ", stringify!(kdevice_queue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kdevice_queue),
            "::",
            stringify!(busy)
        )
    );
}
impl Default for kdevice_queue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_context_block {
    pub wait_queue_entry: kdevice_queue_entry,
    pub device_routine: *mut ::std::os::raw::c_void,
    pub device_context: *mut ::std::os::raw::c_void,
    pub num_regs: ULONG,
    pub device_object: *mut ::std::os::raw::c_void,
    pub current_irp: *mut ::std::os::raw::c_void,
    pub buffer_chaining_dpc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wait_context_block() {
    const UNINIT: ::std::mem::MaybeUninit<wait_context_block> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait_context_block>(),
        72usize,
        concat!("Size of: ", stringify!(wait_context_block))
    );
    assert_eq!(
        ::std::mem::align_of::<wait_context_block>(),
        8usize,
        concat!("Alignment of ", stringify!(wait_context_block))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_queue_entry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(wait_queue_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_routine) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(device_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_context) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(device_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_regs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(num_regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_object) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(device_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_irp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(current_irp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_chaining_dpc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_context_block),
            "::",
            stringify!(buffer_chaining_dpc)
        )
    );
}
impl Default for wait_context_block {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_block {
    pub list: nt_list,
    pub thread: *mut task_struct,
    pub object: *mut ::std::os::raw::c_void,
    pub wait_done: *mut ::std::os::raw::c_int,
    pub wait_key: USHORT,
    pub wait_type: USHORT,
}
#[test]
fn bindgen_test_layout_wait_block() {
    const UNINIT: ::std::mem::MaybeUninit<wait_block> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait_block>(),
        48usize,
        concat!("Size of: ", stringify!(wait_block))
    );
    assert_eq!(
        ::std::mem::align_of::<wait_block>(),
        8usize,
        concat!("Alignment of ", stringify!(wait_block))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_done) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(wait_done)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(wait_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_type) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(wait_block),
            "::",
            stringify!(wait_type)
        )
    );
}
impl Default for wait_block {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dispatcher_header {
    pub type_: UCHAR,
    pub absolute: UCHAR,
    pub size: UCHAR,
    pub inserted: UCHAR,
    pub signal_state: LONG,
    pub wait_blocks: nt_list,
}
#[test]
fn bindgen_test_layout_dispatcher_header() {
    const UNINIT: ::std::mem::MaybeUninit<dispatcher_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dispatcher_header>(),
        24usize,
        concat!("Size of: ", stringify!(dispatcher_header))
    );
    assert_eq!(
        ::std::mem::align_of::<dispatcher_header>(),
        8usize,
        concat!("Alignment of ", stringify!(dispatcher_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(absolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inserted) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(inserted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(signal_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_blocks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatcher_header),
            "::",
            stringify!(wait_blocks)
        )
    );
}
impl Default for dispatcher_header {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const event_type_NotificationEvent: event_type = 0;
pub const event_type_SynchronizationEvent: event_type = 1;
pub type event_type = ::std::os::raw::c_uint;
pub const timer_type_NotificationTimer: timer_type = 0;
pub const timer_type_SynchronizationTimer: timer_type = 1;
pub type timer_type = ::std::os::raw::c_uint;
pub const dh_type_NotificationObject: dh_type = 0;
pub const dh_type_SynchronizationObject: dh_type = 1;
pub const dh_type_MutexObject: dh_type = 2;
pub const dh_type_SemaphoreObject: dh_type = 3;
pub const dh_type_ThreadObject: dh_type = 4;
pub type dh_type = ::std::os::raw::c_uint;
pub const wait_type_WaitAll: wait_type = 0;
pub const wait_type_WaitAny: wait_type = 1;
pub type wait_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_event {
    pub dh: dispatcher_header,
}
#[test]
fn bindgen_test_layout_nt_event() {
    const UNINIT: ::std::mem::MaybeUninit<nt_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_event>(),
        24usize,
        concat!("Size of: ", stringify!(nt_event))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_event>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_event),
            "::",
            stringify!(dh)
        )
    );
}
impl Default for nt_event {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wrap_timer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_timer {
    pub dh: dispatcher_header,
    pub __bindgen_anon_1: nt_timer__bindgen_ty_1,
    pub nt_timer_list: nt_list,
    pub kdpc: *mut kdpc,
    pub __bindgen_anon_2: nt_timer__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nt_timer__bindgen_ty_1 {
    pub due_time: ULONGLONG,
    pub wrap_timer: *mut wrap_timer,
}
#[test]
fn bindgen_test_layout_nt_timer__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<nt_timer__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_timer__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(nt_timer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_timer__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_timer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).due_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer__bindgen_ty_1),
            "::",
            stringify!(due_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer__bindgen_ty_1),
            "::",
            stringify!(wrap_timer)
        )
    );
}
impl Default for nt_timer__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nt_timer__bindgen_ty_2 {
    pub period: LONG,
    pub wrap_timer_magic: LONG,
}
#[test]
fn bindgen_test_layout_nt_timer__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<nt_timer__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_timer__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(nt_timer__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_timer__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(nt_timer__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer__bindgen_ty_2),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_timer_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer__bindgen_ty_2),
            "::",
            stringify!(wrap_timer_magic)
        )
    );
}
impl Default for nt_timer__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nt_timer() {
    const UNINIT: ::std::mem::MaybeUninit<nt_timer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_timer>(),
        64usize,
        concat!("Size of: ", stringify!(nt_timer))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_timer>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_timer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer),
            "::",
            stringify!(dh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_timer_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer),
            "::",
            stringify!(nt_timer_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdpc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_timer),
            "::",
            stringify!(kdpc)
        )
    );
}
impl Default for nt_timer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_mutex {
    pub dh: dispatcher_header,
    pub list: nt_list,
    pub owner_thread: *mut task_struct,
    pub abandoned: BOOLEAN,
    pub apc_disable: BOOLEAN,
}
#[test]
fn bindgen_test_layout_nt_mutex() {
    const UNINIT: ::std::mem::MaybeUninit<nt_mutex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_mutex>(),
        56usize,
        concat!("Size of: ", stringify!(nt_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_mutex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_mutex),
            "::",
            stringify!(dh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_mutex),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner_thread) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_mutex),
            "::",
            stringify!(owner_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abandoned) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_mutex),
            "::",
            stringify!(abandoned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apc_disable) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_mutex),
            "::",
            stringify!(apc_disable)
        )
    );
}
impl Default for nt_mutex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_semaphore {
    pub dh: dispatcher_header,
    pub limit: LONG,
}
#[test]
fn bindgen_test_layout_nt_semaphore() {
    const UNINIT: ::std::mem::MaybeUninit<nt_semaphore> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_semaphore>(),
        32usize,
        concat!("Size of: ", stringify!(nt_semaphore))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_semaphore>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_semaphore))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_semaphore),
            "::",
            stringify!(dh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_semaphore),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for nt_semaphore {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_thread {
    pub dh: dispatcher_header,
    pub pid: ::std::os::raw::c_int,
    pub status: NTSTATUS,
    pub task: *mut task_struct,
    pub irps: nt_list,
    pub lock: NT_SPIN_LOCK,
    pub prio: KPRIORITY,
}
#[test]
fn bindgen_test_layout_nt_thread() {
    const UNINIT: ::std::mem::MaybeUninit<nt_thread> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_thread>(),
        72usize,
        concat!("Size of: ", stringify!(nt_thread))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_thread>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(dh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irps) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(irps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_thread),
            "::",
            stringify!(prio)
        )
    );
}
impl Default for nt_thread {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct device_object {
    pub type_: CSHORT,
    pub size: USHORT,
    pub ref_count: LONG,
    pub drv_obj: *mut driver_object,
    pub next: *mut device_object,
    pub attached: *mut device_object,
    pub current_irp: *mut irp,
    pub io_timer: *mut ::std::os::raw::c_void,
    pub flags: ULONG,
    pub characteristics: ULONG,
    pub vpb: *mut ::std::os::raw::c_void,
    pub dev_ext: *mut ::std::os::raw::c_void,
    pub stack_count: CCHAR,
    pub queue: device_object__bindgen_ty_1,
    pub align_req: ULONG,
    pub dev_queue: kdevice_queue,
    pub dpc: kdpc,
    pub active_threads: ULONG,
    pub security_desc: *mut ::std::os::raw::c_void,
    pub lock: nt_event,
    pub sector_size: USHORT,
    pub spare1: USHORT,
    pub dev_obj_ext: *mut dev_obj_ext,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union device_object__bindgen_ty_1 {
    pub queue_list: nt_list,
    pub wcb: wait_context_block,
}
#[test]
fn bindgen_test_layout_device_object__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<device_object__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<device_object__bindgen_ty_1>(),
        72usize,
        concat!("Size of: ", stringify!(device_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<device_object__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(device_object__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object__bindgen_ty_1),
            "::",
            stringify!(queue_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wcb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object__bindgen_ty_1),
            "::",
            stringify!(wcb)
        )
    );
}
impl Default for device_object__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_device_object() {
    const UNINIT: ::std::mem::MaybeUninit<device_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<device_object>(),
        328usize,
        concat!("Size of: ", stringify!(device_object))
    );
    assert_eq!(
        ::std::mem::align_of::<device_object>(),
        8usize,
        concat!("Alignment of ", stringify!(device_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drv_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(drv_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attached) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(attached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_irp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(current_irp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_timer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(io_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).characteristics) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpb) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(vpb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_ext) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(dev_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(stack_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_req) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(align_req)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_queue) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(dev_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpc) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(dpc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_threads) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(active_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_desc) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(security_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sector_size) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare1) as usize - ptr as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(spare1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj_ext) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(dev_obj_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(device_object),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for device_object {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dev_obj_ext {
    pub type_: CSHORT,
    pub size: CSHORT,
    pub dev_obj: *mut device_object,
    pub attached_to: *mut device_object,
}
#[test]
fn bindgen_test_layout_dev_obj_ext() {
    const UNINIT: ::std::mem::MaybeUninit<dev_obj_ext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dev_obj_ext>(),
        24usize,
        concat!("Size of: ", stringify!(dev_obj_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<dev_obj_ext>(),
        8usize,
        concat!("Alignment of ", stringify!(dev_obj_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_obj_ext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_obj_ext),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_obj_ext),
            "::",
            stringify!(dev_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attached_to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dev_obj_ext),
            "::",
            stringify!(attached_to)
        )
    );
}
impl Default for dev_obj_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_status_block {
    pub __bindgen_anon_1: io_status_block__bindgen_ty_1,
    pub info: ULONG_PTR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_status_block__bindgen_ty_1 {
    pub status: NTSTATUS,
    pub pointer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_status_block__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_status_block__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_status_block__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io_status_block__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_status_block__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_status_block__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_status_block__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_status_block__bindgen_ty_1),
            "::",
            stringify!(pointer)
        )
    );
}
impl Default for io_status_block__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_status_block() {
    const UNINIT: ::std::mem::MaybeUninit<io_status_block> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_status_block>(),
        16usize,
        concat!("Size of: ", stringify!(io_status_block))
    );
    assert_eq!(
        ::std::mem::align_of::<io_status_block>(),
        8usize,
        concat!("Alignment of ", stringify!(io_status_block))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_status_block),
            "::",
            stringify!(info)
        )
    );
}
impl Default for io_status_block {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type driver_dispatch_t = ::std::option::Option<
    unsafe extern "C" fn(dev_obj: *mut device_object, irp: *mut irp) -> NTSTATUS,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct driver_object {
    pub type_: CSHORT,
    pub size: CSHORT,
    pub dev_obj: *mut device_object,
    pub flags: ULONG,
    pub start: *mut ::std::os::raw::c_void,
    pub driver_size: ULONG,
    pub section: *mut ::std::os::raw::c_void,
    pub drv_ext: *mut driver_extension,
    pub name: unicode_string,
    pub hardware_database: *mut unicode_string,
    pub fast_io_dispatch: *mut ::std::os::raw::c_void,
    pub init: *mut ::std::os::raw::c_void,
    pub start_io: *mut ::std::os::raw::c_void,
    pub unload: ::std::option::Option<unsafe extern "C" fn(driver: *mut driver_object)>,
    pub major_func: [driver_dispatch_t; 28usize],
}
#[test]
fn bindgen_test_layout_driver_object() {
    const UNINIT: ::std::mem::MaybeUninit<driver_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<driver_object>(),
        336usize,
        concat!("Size of: ", stringify!(driver_object))
    );
    assert_eq!(
        ::std::mem::align_of::<driver_object>(),
        8usize,
        concat!("Alignment of ", stringify!(driver_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(dev_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(driver_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drv_ext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(drv_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardware_database) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(hardware_database)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fast_io_dispatch) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(fast_io_dispatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_io) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(start_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unload) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(unload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_func) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_object),
            "::",
            stringify!(major_func)
        )
    );
}
impl Default for driver_object {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct driver_extension {
    pub drv_obj: *mut driver_object,
    pub add_device: ::std::option::Option<
        unsafe extern "C" fn(drv_obj: *mut driver_object, dev_obj: *mut device_object) -> NTSTATUS,
    >,
    pub count: ULONG,
    pub service_key_name: unicode_string,
    pub custom_ext: nt_list,
}
#[test]
fn bindgen_test_layout_driver_extension() {
    const UNINIT: ::std::mem::MaybeUninit<driver_extension> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<driver_extension>(),
        56usize,
        concat!("Size of: ", stringify!(driver_extension))
    );
    assert_eq!(
        ::std::mem::align_of::<driver_extension>(),
        8usize,
        concat!("Alignment of ", stringify!(driver_extension))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drv_obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_extension),
            "::",
            stringify!(drv_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_extension),
            "::",
            stringify!(add_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_extension),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_key_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_extension),
            "::",
            stringify!(service_key_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_ext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(driver_extension),
            "::",
            stringify!(custom_ext)
        )
    );
}
impl Default for driver_extension {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct custom_ext {
    pub list: nt_list,
    pub client_id: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_custom_ext() {
    const UNINIT: ::std::mem::MaybeUninit<custom_ext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<custom_ext>(),
        24usize,
        concat!("Size of: ", stringify!(custom_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<custom_ext>(),
        8usize,
        concat!("Alignment of ", stringify!(custom_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(custom_ext),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(custom_ext),
            "::",
            stringify!(client_id)
        )
    );
}
impl Default for custom_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wrap_bin_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_object {
    pub type_: CSHORT,
    pub size: CSHORT,
    pub dev_obj: *mut device_object,
    pub volume_parameter_block: *mut ::std::os::raw::c_void,
    pub fs_context: *mut ::std::os::raw::c_void,
    pub fs_context2: *mut ::std::os::raw::c_void,
    pub section_object_pointer: *mut ::std::os::raw::c_void,
    pub private_cache_map: *mut ::std::os::raw::c_void,
    pub final_status: NTSTATUS,
    pub __bindgen_anon_1: file_object__bindgen_ty_1,
    pub lock_operation: BOOLEAN,
    pub delete_pending: BOOLEAN,
    pub read_access: BOOLEAN,
    pub write_access: BOOLEAN,
    pub delete_access: BOOLEAN,
    pub shared_read: BOOLEAN,
    pub shared_write: BOOLEAN,
    pub shared_delete: BOOLEAN,
    pub flags: ULONG,
    pub _name_: unicode_string,
    pub current_byte_offset: LARGE_INTEGER,
    pub waiters: ULONG,
    pub busy: ULONG,
    pub last_lock: *mut ::std::os::raw::c_void,
    pub lock: nt_event,
    pub event: nt_event,
    pub completion_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file_object__bindgen_ty_1 {
    pub related_file_object: *mut file_object,
    pub wrap_bin_file: *mut wrap_bin_file,
}
#[test]
fn bindgen_test_layout_file_object__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<file_object__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_object__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(file_object__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<file_object__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(file_object__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).related_file_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object__bindgen_ty_1),
            "::",
            stringify!(related_file_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_bin_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object__bindgen_ty_1),
            "::",
            stringify!(wrap_bin_file)
        )
    );
}
impl Default for file_object__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_file_object() {
    const UNINIT: ::std::mem::MaybeUninit<file_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_object>(),
        184usize,
        concat!("Size of: ", stringify!(file_object))
    );
    assert_eq!(
        ::std::mem::align_of::<file_object>(),
        8usize,
        concat!("Alignment of ", stringify!(file_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(dev_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volume_parameter_block) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(volume_parameter_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(fs_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_context2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(fs_context2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).section_object_pointer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(section_object_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_cache_map) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(private_cache_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).final_status) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(final_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_operation) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(lock_operation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delete_pending) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(delete_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_access) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(read_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_access) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(write_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delete_access) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(delete_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_read) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(shared_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_write) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(shared_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_delete) as usize - ptr as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(shared_delete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._name_) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(_name_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_byte_offset) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(current_byte_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waiters) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(waiters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_lock) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(last_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completion_context) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(completion_context)
        )
    );
}
impl Default for file_object {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const system_power_state_PowerSystemUnspecified: system_power_state = 0;
pub const system_power_state_PowerSystemWorking: system_power_state = 1;
pub const system_power_state_PowerSystemSleeping1: system_power_state = 2;
pub const system_power_state_PowerSystemSleeping2: system_power_state = 3;
pub const system_power_state_PowerSystemSleeping3: system_power_state = 4;
pub const system_power_state_PowerSystemHibernate: system_power_state = 5;
pub const system_power_state_PowerSystemShutdown: system_power_state = 6;
pub const system_power_state_PowerSystemMaximum: system_power_state = 7;
pub type system_power_state = ::std::os::raw::c_uint;
pub const device_power_state_PowerDeviceUnspecified: device_power_state = 0;
pub const device_power_state_PowerDeviceD0: device_power_state = 1;
pub const device_power_state_PowerDeviceD1: device_power_state = 2;
pub const device_power_state_PowerDeviceD2: device_power_state = 3;
pub const device_power_state_PowerDeviceD3: device_power_state = 4;
pub const device_power_state_PowerDeviceMaximum: device_power_state = 5;
pub type device_power_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union power_state {
    pub system_state: system_power_state,
    pub device_state: device_power_state,
}
#[test]
fn bindgen_test_layout_power_state() {
    const UNINIT: ::std::mem::MaybeUninit<power_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<power_state>(),
        4usize,
        concat!("Size of: ", stringify!(power_state))
    );
    assert_eq!(
        ::std::mem::align_of::<power_state>(),
        4usize,
        concat!("Alignment of ", stringify!(power_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(power_state),
            "::",
            stringify!(system_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(power_state),
            "::",
            stringify!(device_state)
        )
    );
}
impl Default for power_state {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const power_state_type_SystemPowerState: power_state_type = 0;
pub const power_state_type_DevicePowerState: power_state_type = 1;
pub type power_state_type = ::std::os::raw::c_uint;
pub const power_action_PowerActionNone: power_action = 0;
pub const power_action_PowerActionReserved: power_action = 1;
pub const power_action_PowerActionSleep: power_action = 2;
pub const power_action_PowerActionHibernate: power_action = 3;
pub const power_action_PowerActionShutdown: power_action = 4;
pub const power_action_PowerActionShutdownReset: power_action = 5;
pub const power_action_PowerActionShutdownOff: power_action = 6;
pub const power_action_PowerActionWarmEject: power_action = 7;
pub type power_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct guid {
    pub data1: ULONG,
    pub data2: USHORT,
    pub data3: USHORT,
    pub data4: [UCHAR; 8usize],
}
#[test]
fn bindgen_test_layout_guid() {
    const UNINIT: ::std::mem::MaybeUninit<guid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<guid>(),
        16usize,
        concat!("Size of: ", stringify!(guid))
    );
    assert_eq!(
        ::std::mem::align_of::<guid>(),
        4usize,
        concat!("Alignment of ", stringify!(guid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(guid),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(guid),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(guid),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(guid),
            "::",
            stringify!(data4)
        )
    );
}
pub type GUID = guid;
pub type PGUID = *mut guid;
pub type LPGUID = *mut guid;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nt_interface {
    pub size: USHORT,
    pub version: USHORT,
    pub context: *mut ::std::os::raw::c_void,
    pub reference:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub dereference:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_nt_interface() {
    const UNINIT: ::std::mem::MaybeUninit<nt_interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<nt_interface>(),
        32usize,
        concat!("Size of: ", stringify!(nt_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<nt_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(nt_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_interface),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_interface),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_interface),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_interface),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dereference) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nt_interface),
            "::",
            stringify!(dereference)
        )
    );
}
impl Default for nt_interface {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const interface_type_InterfaceTypeUndefined: interface_type = -1;
pub const interface_type_Internal: interface_type = 0;
pub const interface_type_Isa: interface_type = 1;
pub const interface_type_Eisa: interface_type = 2;
pub const interface_type_MicroChannel: interface_type = 3;
pub const interface_type_TurboChannel: interface_type = 4;
pub const interface_type_PCIBus: interface_type = 5;
pub const interface_type_VMEBus: interface_type = 6;
pub const interface_type_NuBus: interface_type = 7;
pub const interface_type_PCMCIABus: interface_type = 8;
pub const interface_type_CBus: interface_type = 9;
pub const interface_type_MPIBus: interface_type = 10;
pub const interface_type_MPSABus: interface_type = 11;
pub const interface_type_ProcessorInternal: interface_type = 12;
pub const interface_type_InternalPowerBus: interface_type = 13;
pub const interface_type_PNPISABus: interface_type = 14;
pub const interface_type_PNPBus: interface_type = 15;
pub const interface_type_MaximumInterfaceType: interface_type = 16;
pub type interface_type = ::std::os::raw::c_int;
pub const cm_share_disposition_CmResourceShareUndetermined: cm_share_disposition = 0;
pub const cm_share_disposition_CmResourceShareDeviceExclusive: cm_share_disposition = 1;
pub const cm_share_disposition_CmResourceShareDriverExclusive: cm_share_disposition = 2;
pub const cm_share_disposition_CmResourceShareShared: cm_share_disposition = 3;
pub type cm_share_disposition = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cm_partial_resource_descriptor {
    pub type_: UCHAR,
    pub share: UCHAR,
    pub flags: USHORT,
    pub u: cm_partial_resource_descriptor__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cm_partial_resource_descriptor__bindgen_ty_1 {
    pub generic: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1,
    pub port: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2,
    pub interrupt: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3,
    pub memory: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4,
    pub dma: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5,
    pub device_private: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6,
    pub bus_number: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7,
    pub device_specific_data: cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8,
}
#[repr(C, packed(4))]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1 {
    pub start: PHYSICAL_ADDRESS,
    pub length: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2 {
    pub start: PHYSICAL_ADDRESS,
    pub length: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3 {
    pub level: ULONG,
    pub vector: ULONG,
    pub affinity: KAFFINITY,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affinity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(affinity)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4 {
    pub start: PHYSICAL_ADDRESS,
    pub length: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5 {
    pub channel: ULONG,
    pub port: ULONG,
    pub reserved1: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(reserved1)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6 {
    pub data: [ULONG; 3usize],
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7 {
    pub start: ULONG,
    pub length: ULONG,
    pub reserved: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8 {
    pub data_size: ULONG,
    pub reserved1: ULONG,
    pub reserved2: ULONG,
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<
        cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cm_partial_resource_descriptor__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(generic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(interrupt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dma) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_private) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(device_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(bus_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_specific_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor__bindgen_ty_1),
            "::",
            stringify!(device_specific_data)
        )
    );
}
impl Default for cm_partial_resource_descriptor__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cm_partial_resource_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<cm_partial_resource_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_descriptor>(),
        20usize,
        concat!("Size of: ", stringify!(cm_partial_resource_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(cm_partial_resource_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor),
            "::",
            stringify!(share)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_descriptor),
            "::",
            stringify!(u)
        )
    );
}
impl Default for cm_partial_resource_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cm_partial_resource_list {
    pub version: USHORT,
    pub revision: USHORT,
    pub count: ULONG,
    pub partial_descriptors: [cm_partial_resource_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_cm_partial_resource_list() {
    const UNINIT: ::std::mem::MaybeUninit<cm_partial_resource_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_partial_resource_list>(),
        28usize,
        concat!("Size of: ", stringify!(cm_partial_resource_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cm_partial_resource_list>(),
        4usize,
        concat!("Alignment of ", stringify!(cm_partial_resource_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_list),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_list),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_list),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partial_descriptors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_partial_resource_list),
            "::",
            stringify!(partial_descriptors)
        )
    );
}
impl Default for cm_partial_resource_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cm_full_resource_descriptor {
    pub interface_type: interface_type,
    pub bus_number: ULONG,
    pub partial_resource_list: cm_partial_resource_list,
}
#[test]
fn bindgen_test_layout_cm_full_resource_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<cm_full_resource_descriptor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_full_resource_descriptor>(),
        36usize,
        concat!("Size of: ", stringify!(cm_full_resource_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<cm_full_resource_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(cm_full_resource_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_full_resource_descriptor),
            "::",
            stringify!(interface_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_full_resource_descriptor),
            "::",
            stringify!(bus_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partial_resource_list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_full_resource_descriptor),
            "::",
            stringify!(partial_resource_list)
        )
    );
}
impl Default for cm_full_resource_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cm_resource_list {
    pub count: ULONG,
    pub list: [cm_full_resource_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_cm_resource_list() {
    const UNINIT: ::std::mem::MaybeUninit<cm_resource_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cm_resource_list>(),
        40usize,
        concat!("Size of: ", stringify!(cm_resource_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cm_resource_list>(),
        4usize,
        concat!("Alignment of ", stringify!(cm_resource_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_resource_list),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cm_resource_list),
            "::",
            stringify!(list)
        )
    );
}
impl Default for cm_resource_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const file_info_class_FileDirectoryInformation: file_info_class = 1;
pub const file_info_class_FileBasicInformation: file_info_class = 4;
pub const file_info_class_FileStandardInformation: file_info_class = 5;
pub const file_info_class_FileNameInformation: file_info_class = 9;
pub const file_info_class_FilePositionInformation: file_info_class = 14;
pub const file_info_class_FileAlignmentInformation: file_info_class = 17;
pub const file_info_class_FileNetworkOpenInformation: file_info_class = 34;
pub const file_info_class_FileAttributeTagInformation: file_info_class = 35;
pub const file_info_class_FileMaximumInformation: file_info_class = 41;
pub type file_info_class = ::std::os::raw::c_uint;
pub const fs_info_class_FileFsVolumeInformation: fs_info_class = 1;
pub const fs_info_class_FileFsMaximumInformation: fs_info_class = 9;
pub type fs_info_class = ::std::os::raw::c_uint;
pub const device_relation_type_BusRelations: device_relation_type = 0;
pub const device_relation_type_EjectionRelations: device_relation_type = 1;
pub const device_relation_type_PowerRelations: device_relation_type = 2;
pub const device_relation_type_RemovalRelations: device_relation_type = 3;
pub const device_relation_type_TargetDeviceRelation: device_relation_type = 4;
pub const device_relation_type_SingleBusRelations: device_relation_type = 5;
pub type device_relation_type = ::std::os::raw::c_uint;
pub const bus_query_id_type_BusQueryDeviceID: bus_query_id_type = 0;
pub const bus_query_id_type_BusQueryHardwareIDs: bus_query_id_type = 1;
pub const bus_query_id_type_BusQueryCompatibleIDs: bus_query_id_type = 2;
pub const bus_query_id_type_BusQueryInstanceID: bus_query_id_type = 3;
pub const bus_query_id_type_BusQueryDeviceSerialNumber: bus_query_id_type = 4;
pub type bus_query_id_type = ::std::os::raw::c_uint;
pub const device_text_type_DeviceTextDescription: device_text_type = 0;
pub const device_text_type_DeviceTextLocationInformation: device_text_type = 1;
pub type device_text_type = ::std::os::raw::c_uint;
pub const device_usage_notification_type_DeviceUsageTypeUndefined: device_usage_notification_type =
    0;
pub const device_usage_notification_type_DeviceUsageTypePaging: device_usage_notification_type = 1;
pub const device_usage_notification_type_DeviceUsageTypeHibernation:
    device_usage_notification_type = 2;
pub const device_usage_notification_type_DevbiceUsageTypeDumpFile: device_usage_notification_type =
    3;
pub type device_usage_notification_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location {
    pub major_fn: UCHAR,
    pub minor_fn: UCHAR,
    pub flags: UCHAR,
    pub control: UCHAR,
    pub params: io_stack_location__bindgen_ty_1,
    pub dev_obj: *mut device_object,
    pub file_obj: *mut file_object,
    pub completion_routine: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut device_object,
            arg2: *mut irp,
            arg3: *mut ::std::os::raw::c_void,
        ) -> NTSTATUS,
    >,
    pub context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_stack_location__bindgen_ty_1 {
    pub create: io_stack_location__bindgen_ty_1__bindgen_ty_1,
    pub read: io_stack_location__bindgen_ty_1__bindgen_ty_2,
    pub write: io_stack_location__bindgen_ty_1__bindgen_ty_3,
    pub query_file: io_stack_location__bindgen_ty_1__bindgen_ty_4,
    pub set_file: io_stack_location__bindgen_ty_1__bindgen_ty_5,
    pub query_volume: io_stack_location__bindgen_ty_1__bindgen_ty_6,
    pub dev_ioctl: io_stack_location__bindgen_ty_1__bindgen_ty_7,
    pub query_security: io_stack_location__bindgen_ty_1__bindgen_ty_8,
    pub set_security: io_stack_location__bindgen_ty_1__bindgen_ty_9,
    pub mount_volume: io_stack_location__bindgen_ty_1__bindgen_ty_10,
    pub verify_volume: io_stack_location__bindgen_ty_1__bindgen_ty_11,
    pub scsi: io_stack_location__bindgen_ty_1__bindgen_ty_12,
    pub query_device_relations: io_stack_location__bindgen_ty_1__bindgen_ty_13,
    pub query_intf: io_stack_location__bindgen_ty_1__bindgen_ty_14,
    pub device_capabilities: io_stack_location__bindgen_ty_1__bindgen_ty_15,
    pub filter_resource_requirements: io_stack_location__bindgen_ty_1__bindgen_ty_16,
    pub read_write_config: io_stack_location__bindgen_ty_1__bindgen_ty_17,
    pub set_lock: io_stack_location__bindgen_ty_1__bindgen_ty_18,
    pub query_id: io_stack_location__bindgen_ty_1__bindgen_ty_19,
    pub query_device_text: io_stack_location__bindgen_ty_1__bindgen_ty_20,
    pub usage_notification: io_stack_location__bindgen_ty_1__bindgen_ty_21,
    pub wait_wake: io_stack_location__bindgen_ty_1__bindgen_ty_22,
    pub power_sequence: io_stack_location__bindgen_ty_1__bindgen_ty_23,
    pub power: io_stack_location__bindgen_ty_1__bindgen_ty_24,
    pub start_device: io_stack_location__bindgen_ty_1__bindgen_ty_25,
    pub wmi: io_stack_location__bindgen_ty_1__bindgen_ty_26,
    pub others: io_stack_location__bindgen_ty_1__bindgen_ty_27,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_1 {
    pub security_context: *mut ::std::os::raw::c_void,
    pub options: ULONG,
    pub file_attributes: USHORT,
    pub share_access: USHORT,
    pub ea_length: ULONG,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(security_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_attributes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(file_attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_access) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(share_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ea_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ea_length)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_2 {
    pub length: ULONG,
    pub key: ULONG,
    pub byte_offset: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(byte_offset)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_3 {
    pub length: ULONG,
    pub key: ULONG,
    pub byte_offset: LARGE_INTEGER,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(byte_offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_4 {
    pub length: ULONG,
    pub file_info_class: file_info_class,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_info_class) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(file_info_class)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_5 {
    pub length: ULONG,
    pub file_info_class: file_info_class,
    pub file_object: *mut file_object,
    pub __bindgen_anon_1: io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub __bindgen_anon_1: io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub cluster_count: ULONG,
    pub delete_handle: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub replace_if_exists: BOOLEAN,
    pub advance_only: BOOLEAN,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<
            io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        >(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replace_if_exists) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(replace_if_exists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advance_only) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(advance_only)
        )
    );
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(cluster_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delete_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(delete_handle)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_5>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_info_class) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(file_info_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(file_object)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_6 {
    pub length: ULONG,
    pub fs_info_class: fs_info_class,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_info_class) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(fs_info_class)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_7 {
    pub output_buf_len: ULONG,
    pub input_buf_len: ULONG,
    pub code: ULONG,
    pub type3_input_buf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_7>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_buf_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(output_buf_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_buf_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(input_buf_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type3_input_buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(type3_input_buf)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_8 {
    pub security_info: SECURITY_INFORMATION,
    pub length: ULONG,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(security_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_9 {
    pub security_info: SECURITY_INFORMATION,
    pub security_descriptor: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_9>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(security_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_descriptor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(security_descriptor)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_10 {
    pub vpb: *mut ::std::os::raw::c_void,
    pub device_object: *mut device_object,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_10() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_10> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_10>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(vpb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(device_object)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_11 {
    pub vpb: *mut ::std::os::raw::c_void,
    pub device_object: *mut device_object,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_11() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_11> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_11>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vpb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(vpb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(device_object)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_12 {
    pub srb: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_12() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_12> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(srb)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_13 {
    pub type_: device_relation_type,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_13() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_13> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_13>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_13>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_14 {
    pub type_: *const guid,
    pub size: USHORT,
    pub version: USHORT,
    pub intf: *mut nt_interface,
    pub intf_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_14() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_14> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_14>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_14>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(intf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(intf_data)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_15 {
    pub capabilities: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_15() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_15> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_15>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_15>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(capabilities)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_16 {
    pub io_resource_requirement_list: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_16() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_16> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_16>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_16>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_resource_requirement_list) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(io_resource_requirement_list)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_17 {
    pub which_space: ULONG,
    pub buffer: *mut ::std::os::raw::c_void,
    pub offset: ULONG,
    pub length: ULONG,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_17() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_17> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_17>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_17>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(which_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(length)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_18 {
    pub lock: BOOLEAN,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_18() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_18> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_18>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_18>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(lock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_19 {
    pub id_type: bus_query_id_type,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_19() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_19> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_19>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_19>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(id_type)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_20 {
    pub device_text_type: device_text_type,
    pub locale_id: ULONG,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_20() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_20> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_20>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_20>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_text_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(device_text_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locale_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(locale_id)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_21 {
    pub in_path: BOOLEAN,
    pub reserved: [BOOLEAN; 3usize],
    pub type_: device_usage_notification_type,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_21() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_21> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_21>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_21>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(in_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_22 {
    pub power_state: system_power_state,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_22() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_22> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_22>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_22>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(power_state)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_23 {
    pub power_sequence: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_23() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_23> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_23>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_23>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(power_sequence)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_23 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_24 {
    pub sys_context: ULONG,
    pub type_: power_state_type,
    pub state: power_state,
    pub shutdown_type: power_action,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_24() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_24> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_24>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_24>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(sys_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shutdown_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(shutdown_type)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_24 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_25 {
    pub allocated_resources: *mut cm_resource_list,
    pub allocated_resources_translated: *mut cm_resource_list,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_25() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_25> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_25>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_25>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated_resources) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(allocated_resources)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allocated_resources_translated) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(allocated_resources_translated)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_25 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_26 {
    pub provider_id: ULONG_PTR,
    pub data_path: *mut ::std::os::raw::c_void,
    pub buf_len: ULONG,
    pub buf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_26() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_26> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_26>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_26>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provider_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(provider_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(data_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(buf_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(buf)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_26 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stack_location__bindgen_ty_1__bindgen_ty_27 {
    pub arg1: *mut ::std::os::raw::c_void,
    pub arg2: *mut ::std::os::raw::c_void,
    pub arg3: *mut ::std::os::raw::c_void,
    pub arg4: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1__bindgen_ty_27() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1__bindgen_ty_27> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1__bindgen_ty_27>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1__bindgen_ty_27>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27),
            "::",
            stringify!(arg3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1__bindgen_ty_27),
            "::",
            stringify!(arg4)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1__bindgen_ty_27 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_stack_location__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(io_stack_location__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stack_location__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(set_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_volume) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_ioctl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(dev_ioctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_security) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_security) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(set_security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mount_volume) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(mount_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify_volume) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(verify_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scsi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(scsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_device_relations) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_device_relations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_intf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_intf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_capabilities) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(device_capabilities)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filter_resource_requirements) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(filter_resource_requirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_write_config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(read_write_config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(set_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_device_text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(query_device_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_notification) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(usage_notification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_wake) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(wait_wake)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(power_sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(start_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wmi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(wmi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).others) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location__bindgen_ty_1),
            "::",
            stringify!(others)
        )
    );
}
impl Default for io_stack_location__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_stack_location() {
    const UNINIT: ::std::mem::MaybeUninit<io_stack_location> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stack_location>(),
        72usize,
        concat!("Size of: ", stringify!(io_stack_location))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stack_location>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stack_location))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_fn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(major_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor_fn) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(minor_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(dev_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_obj) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(file_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completion_routine) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(completion_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stack_location),
            "::",
            stringify!(context)
        )
    );
}
impl Default for io_stack_location {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kapc {
    pub type_: CSHORT,
    pub size: CSHORT,
    pub spare0: ULONG,
    pub thread: *mut nt_thread,
    pub list: nt_list,
    pub kernele_routine: *mut ::std::os::raw::c_void,
    pub rundown_routine: *mut ::std::os::raw::c_void,
    pub normal_routine: *mut ::std::os::raw::c_void,
    pub normal_context: *mut ::std::os::raw::c_void,
    pub sys_arg1: *mut ::std::os::raw::c_void,
    pub sys_arg2: *mut ::std::os::raw::c_void,
    pub apc_state_index: CCHAR,
    pub apc_mode: KPROCESSOR_MODE,
    pub inserted: BOOLEAN,
}
#[test]
fn bindgen_test_layout_kapc() {
    const UNINIT: ::std::mem::MaybeUninit<kapc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kapc>(),
        88usize,
        concat!("Size of: ", stringify!(kapc))
    );
    assert_eq!(
        ::std::mem::align_of::<kapc>(),
        8usize,
        concat!("Alignment of ", stringify!(kapc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(spare0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernele_routine) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(kernele_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rundown_routine) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(rundown_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal_routine) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(normal_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal_context) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(normal_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_arg1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(sys_arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_arg2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(sys_arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apc_state_index) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(apc_state_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apc_mode) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(apc_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inserted) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(kapc),
            "::",
            stringify!(inserted)
        )
    );
}
impl Default for kapc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const urb_state_URB_INVALID: urb_state = 1;
pub const urb_state_URB_ALLOCATED: urb_state = 2;
pub const urb_state_URB_SUBMITTED: urb_state = 3;
pub const urb_state_URB_COMPLETED: urb_state = 4;
pub const urb_state_URB_FREE: urb_state = 5;
pub const urb_state_URB_SUSPEND: urb_state = 6;
pub const urb_state_URB_INT_UNLINKED: urb_state = 7;
pub type urb_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wrap_urb {
    pub list: nt_list,
    pub state: urb_state,
    pub complete_list: nt_list,
    pub flags: ::std::os::raw::c_uint,
    pub urb: *mut urb,
    pub irp: *mut irp,
}
#[test]
fn bindgen_test_layout_wrap_urb() {
    const UNINIT: ::std::mem::MaybeUninit<wrap_urb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wrap_urb>(),
        64usize,
        concat!("Size of: ", stringify!(wrap_urb))
    );
    assert_eq!(
        ::std::mem::align_of::<wrap_urb>(),
        8usize,
        concat!("Alignment of ", stringify!(wrap_urb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complete_list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(complete_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).urb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(urb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_urb),
            "::",
            stringify!(irp)
        )
    );
}
impl Default for wrap_urb {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp {
    pub type_: SHORT,
    pub size: USHORT,
    pub mdl: *mut mdl,
    pub flags: ULONG,
    pub associated_irp: irp__bindgen_ty_1,
    pub thread_list: nt_list,
    pub io_status: io_status_block,
    pub requestor_mode: KPROCESSOR_MODE,
    pub pending_returned: BOOLEAN,
    pub stack_count: CHAR,
    pub current_location: CHAR,
    pub cancel: BOOLEAN,
    pub cancel_irql: KIRQL,
    pub apc_env: CCHAR,
    pub alloc_flags: UCHAR,
    pub user_status: *mut io_status_block,
    pub user_event: *mut nt_event,
    pub overlay: irp__bindgen_ty_2,
    pub cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut device_object, arg2: *mut irp)>,
    pub user_buf: *mut ::std::os::raw::c_void,
    pub tail: irp__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_1 {
    pub master_irp: *mut irp,
    pub irp_count: LONG,
    pub system_buffer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master_irp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_1),
            "::",
            stringify!(master_irp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irp_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_1),
            "::",
            stringify!(irp_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_1),
            "::",
            stringify!(system_buffer)
        )
    );
}
impl Default for irp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_2 {
    pub async_params: irp__bindgen_ty_2__bindgen_ty_1,
    pub alloc_size: LARGE_INTEGER,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp__bindgen_ty_2__bindgen_ty_1 {
    pub user_apc_routine: *mut ::std::os::raw::c_void,
    pub user_apc_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_apc_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(user_apc_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_apc_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(user_apc_context)
        )
    );
}
impl Default for irp__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_2),
            "::",
            stringify!(async_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_2),
            "::",
            stringify!(alloc_size)
        )
    );
}
impl Default for irp__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_3 {
    pub overlay: irp__bindgen_ty_3__bindgen_ty_1,
    pub __bindgen_anon_1: irp__bindgen_ty_3__bindgen_ty_2,
    pub completion_key: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp__bindgen_ty_3__bindgen_ty_1 {
    pub __bindgen_anon_1: irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    pub thread: *mut ::std::os::raw::c_void,
    pub aux_buf: *mut ::std::os::raw::c_char,
    pub __bindgen_anon_2: irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2,
    pub file_object: *mut file_object,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub dev_q_entry: kdevice_queue_entry,
    pub __bindgen_anon_1: irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub driver_context: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(driver_context)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_q_entry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dev_q_entry)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2 {
    pub list: nt_list,
    pub __bindgen_anon_1: irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub csl: *mut io_stack_location,
    pub packet_type: ULONG,
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(csl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(packet_type)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(list)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_3__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_buf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(aux_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_object) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(file_object)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union irp__bindgen_ty_3__bindgen_ty_2 {
    pub apc: kapc,
    pub __bindgen_anon_1: irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1 {
    pub wrap_urb: *mut wrap_urb,
    pub wrap_device: *mut wrap_device,
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_urb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(wrap_urb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrap_device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(wrap_device)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3__bindgen_ty_2>(),
        88usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_3__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_3__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(apc)
        )
    );
}
impl Default for irp__bindgen_ty_3__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<irp__bindgen_ty_3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp__bindgen_ty_3>(),
        88usize,
        concat!("Size of: ", stringify!(irp__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<irp__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(irp__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overlay) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3),
            "::",
            stringify!(overlay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completion_key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp__bindgen_ty_3),
            "::",
            stringify!(completion_key)
        )
    );
}
impl Default for irp__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_irp() {
    const UNINIT: ::std::mem::MaybeUninit<irp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irp>(),
        208usize,
        concat!("Size of: ", stringify!(irp))
    );
    assert_eq!(
        ::std::mem::align_of::<irp>(),
        8usize,
        concat!("Alignment of ", stringify!(irp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(irp), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mdl) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(irp), "::", stringify!(mdl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).associated_irp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(associated_irp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(thread_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_status) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(io_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestor_mode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(requestor_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending_returned) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(pending_returned)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_count) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(stack_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_location) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(current_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_irql) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(cancel_irql)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apc_env) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(apc_env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_flags) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(alloc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_status) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(user_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_event) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(user_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overlay) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(overlay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_routine) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_buf) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(irp),
            "::",
            stringify!(user_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(irp), "::", stringify!(tail))
    );
}
impl Default for irp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wmi_guid_reg_info {
    pub guid: *mut guid,
    pub instance_count: ULONG,
    pub flags: ULONG,
}
#[test]
fn bindgen_test_layout_wmi_guid_reg_info() {
    const UNINIT: ::std::mem::MaybeUninit<wmi_guid_reg_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wmi_guid_reg_info>(),
        16usize,
        concat!("Size of: ", stringify!(wmi_guid_reg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<wmi_guid_reg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(wmi_guid_reg_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wmi_guid_reg_info),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wmi_guid_reg_info),
            "::",
            stringify!(instance_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wmi_guid_reg_info),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for wmi_guid_reg_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wmilib_context {
    pub guid_count: ULONG,
    pub guid_list: *mut wmi_guid_reg_info,
    pub query_wmi_reg_info: *mut ::std::os::raw::c_void,
    pub query_wmi_data_block: *mut ::std::os::raw::c_void,
    pub set_wmi_data_block: *mut ::std::os::raw::c_void,
    pub set_wmi_data_item: *mut ::std::os::raw::c_void,
    pub execute_wmi_method: *mut ::std::os::raw::c_void,
    pub wmi_function_control: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wmilib_context() {
    const UNINIT: ::std::mem::MaybeUninit<wmilib_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wmilib_context>(),
        64usize,
        concat!("Size of: ", stringify!(wmilib_context))
    );
    assert_eq!(
        ::std::mem::align_of::<wmilib_context>(),
        8usize,
        concat!("Alignment of ", stringify!(wmilib_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(guid_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guid_list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(guid_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_wmi_reg_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(query_wmi_reg_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_wmi_data_block) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(query_wmi_data_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_wmi_data_block) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(set_wmi_data_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_wmi_data_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(set_wmi_data_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).execute_wmi_method) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(execute_wmi_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wmi_function_control) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wmilib_context),
            "::",
            stringify!(wmi_function_control)
        )
    );
}
impl Default for wmilib_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const key_value_information_class_KeyValueBasicInformation: key_value_information_class = 0;
pub const key_value_information_class_KeyValueFullInformation: key_value_information_class = 1;
pub const key_value_information_class_KeyValuePartialInformation: key_value_information_class = 2;
pub const key_value_information_class_KeyValueFullInformationAlign64: key_value_information_class =
    3;
pub const key_value_information_class_KeyValuePartialInformationAlign64:
    key_value_information_class = 4;
pub type key_value_information_class = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_name_info {
    pub length: ULONG,
    pub name: *mut wchar_t,
}
#[test]
fn bindgen_test_layout_file_name_info() {
    const UNINIT: ::std::mem::MaybeUninit<file_name_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_name_info>(),
        16usize,
        concat!("Size of: ", stringify!(file_name_info))
    );
    assert_eq!(
        ::std::mem::align_of::<file_name_info>(),
        8usize,
        concat!("Alignment of ", stringify!(file_name_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_name_info),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_name_info),
            "::",
            stringify!(name)
        )
    );
}
impl Default for file_name_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct file_std_info {
    pub alloc_size: LARGE_INTEGER,
    pub eof: LARGE_INTEGER,
    pub num_links: ULONG,
    pub delete_pending: BOOLEAN,
    pub dir: BOOLEAN,
}
#[test]
fn bindgen_test_layout_file_std_info() {
    const UNINIT: ::std::mem::MaybeUninit<file_std_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<file_std_info>(),
        24usize,
        concat!("Size of: ", stringify!(file_std_info))
    );
    assert_eq!(
        ::std::mem::align_of::<file_std_info>(),
        8usize,
        concat!("Alignment of ", stringify!(file_std_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_std_info),
            "::",
            stringify!(alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eof) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_std_info),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_links) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_std_info),
            "::",
            stringify!(num_links)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delete_pending) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(file_std_info),
            "::",
            stringify!(delete_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(file_std_info),
            "::",
            stringify!(dir)
        )
    );
}
pub const nt_obj_type_NT_OBJ_EVENT: nt_obj_type = 10;
pub const nt_obj_type_NT_OBJ_MUTEX: nt_obj_type = 11;
pub const nt_obj_type_NT_OBJ_THREAD: nt_obj_type = 12;
pub const nt_obj_type_NT_OBJ_TIMER: nt_obj_type = 13;
pub const nt_obj_type_NT_OBJ_SEMAPHORE: nt_obj_type = 14;
pub type nt_obj_type = ::std::os::raw::c_uint;
pub const common_object_type_OBJECT_TYPE_NONE: common_object_type = 0;
pub const common_object_type_OBJECT_TYPE_DEVICE: common_object_type = 1;
pub const common_object_type_OBJECT_TYPE_DRIVER: common_object_type = 2;
pub const common_object_type_OBJECT_TYPE_NT_THREAD: common_object_type = 3;
pub const common_object_type_OBJECT_TYPE_FILE: common_object_type = 4;
pub const common_object_type_OBJECT_TYPE_CALLBACK: common_object_type = 5;
pub type common_object_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct common_object_header {
    pub list: nt_list,
    pub type_: common_object_type,
    pub size: UINT,
    pub ref_count: UINT,
    pub close_in_process: BOOLEAN,
    pub permanent: BOOLEAN,
    pub name: unicode_string,
}
#[test]
fn bindgen_test_layout_common_object_header() {
    const UNINIT: ::std::mem::MaybeUninit<common_object_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<common_object_header>(),
        48usize,
        concat!("Size of: ", stringify!(common_object_header))
    );
    assert_eq!(
        ::std::mem::align_of::<common_object_header>(),
        8usize,
        concat!("Alignment of ", stringify!(common_object_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close_in_process) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(close_in_process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).permanent) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(permanent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(common_object_header),
            "::",
            stringify!(name)
        )
    );
}
impl Default for common_object_header {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const work_queue_type_CriticalWorkQueue: work_queue_type = 0;
pub const work_queue_type_DelayedWorkQueue: work_queue_type = 1;
pub const work_queue_type_HyperCriticalWorkQueue: work_queue_type = 2;
pub const work_queue_type_MaximumWorkQueue: work_queue_type = 3;
pub type work_queue_type = ::std::os::raw::c_uint;
pub type NTOS_WORK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_workitem {
    pub type_: work_queue_type,
    pub dev_obj: *mut device_object,
    pub worker_routine: NTOS_WORK_FUNC,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_io_workitem() {
    const UNINIT: ::std::mem::MaybeUninit<io_workitem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_workitem>(),
        32usize,
        concat!("Size of: ", stringify!(io_workitem))
    );
    assert_eq!(
        ::std::mem::align_of::<io_workitem>(),
        8usize,
        concat!("Alignment of ", stringify!(io_workitem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem),
            "::",
            stringify!(dev_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).worker_routine) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem),
            "::",
            stringify!(worker_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem),
            "::",
            stringify!(context)
        )
    );
}
impl Default for io_workitem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_workitem_entry {
    pub list: nt_list,
    pub io_workitem: *mut io_workitem,
}
#[test]
fn bindgen_test_layout_io_workitem_entry() {
    const UNINIT: ::std::mem::MaybeUninit<io_workitem_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_workitem_entry>(),
        24usize,
        concat!("Size of: ", stringify!(io_workitem_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<io_workitem_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(io_workitem_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem_entry),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_workitem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_workitem_entry),
            "::",
            stringify!(io_workitem)
        )
    );
}
impl Default for io_workitem_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mm_page_priority_LowPagePriority: mm_page_priority = 0;
pub const mm_page_priority_NormalPagePriority: mm_page_priority = 16;
pub const mm_page_priority_HighPagePriority: mm_page_priority = 32;
pub type mm_page_priority = ::std::os::raw::c_uint;
pub const kinterrupt_mode_LevelSensitive: kinterrupt_mode = 0;
pub const kinterrupt_mode_Latched: kinterrupt_mode = 1;
pub type kinterrupt_mode = ::std::os::raw::c_uint;
pub const ntos_wait_reason_Executive: ntos_wait_reason = 0;
pub const ntos_wait_reason_FreePage: ntos_wait_reason = 1;
pub const ntos_wait_reason_PageIn: ntos_wait_reason = 2;
pub const ntos_wait_reason_PoolAllocation: ntos_wait_reason = 3;
pub const ntos_wait_reason_DelayExecution: ntos_wait_reason = 4;
pub const ntos_wait_reason_Suspended: ntos_wait_reason = 5;
pub const ntos_wait_reason_UserRequest: ntos_wait_reason = 6;
pub const ntos_wait_reason_WrExecutive: ntos_wait_reason = 7;
pub const ntos_wait_reason_WrFreePage: ntos_wait_reason = 8;
pub const ntos_wait_reason_WrPageIn: ntos_wait_reason = 9;
pub const ntos_wait_reason_WrPoolAllocation: ntos_wait_reason = 10;
pub const ntos_wait_reason_WrDelayExecution: ntos_wait_reason = 11;
pub const ntos_wait_reason_WrSuspended: ntos_wait_reason = 12;
pub const ntos_wait_reason_WrUserRequest: ntos_wait_reason = 13;
pub const ntos_wait_reason_WrEventPair: ntos_wait_reason = 14;
pub const ntos_wait_reason_WrQueue: ntos_wait_reason = 15;
pub const ntos_wait_reason_WrLpcReceive: ntos_wait_reason = 16;
pub const ntos_wait_reason_WrLpcReply: ntos_wait_reason = 17;
pub const ntos_wait_reason_WrVirtualMemory: ntos_wait_reason = 18;
pub const ntos_wait_reason_WrPageOut: ntos_wait_reason = 19;
pub const ntos_wait_reason_WrRendezvous: ntos_wait_reason = 20;
pub const ntos_wait_reason_Spare2: ntos_wait_reason = 21;
pub const ntos_wait_reason_Spare3: ntos_wait_reason = 22;
pub const ntos_wait_reason_Spare4: ntos_wait_reason = 23;
pub const ntos_wait_reason_Spare5: ntos_wait_reason = 24;
pub const ntos_wait_reason_Spare6: ntos_wait_reason = 25;
pub const ntos_wait_reason_WrKernel: ntos_wait_reason = 26;
pub const ntos_wait_reason_MaximumWaitReason: ntos_wait_reason = 27;
pub type ntos_wait_reason = ::std::os::raw::c_uint;
pub use self::ntos_wait_reason as KWAIT_REASON;
pub type LOOKASIDE_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        pool_type: pool_type,
        size: SIZE_T,
        tag: ULONG,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type LOOKASIDE_FREE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct npaged_lookaside_list {
    pub head: nt_slist_header,
    pub depth: USHORT,
    pub maxdepth: USHORT,
    pub totalallocs: ULONG,
    pub u1: npaged_lookaside_list__bindgen_ty_1,
    pub totalfrees: ULONG,
    pub u2: npaged_lookaside_list__bindgen_ty_2,
    pub pool_type: pool_type,
    pub tag: ULONG,
    pub size: ULONG,
    pub alloc_func: LOOKASIDE_ALLOC_FUNC,
    pub free_func: LOOKASIDE_FREE_FUNC,
    pub list: nt_list,
    pub lasttotallocs: ULONG,
    pub u3: npaged_lookaside_list__bindgen_ty_3,
    pub pad: [ULONG; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union npaged_lookaside_list__bindgen_ty_1 {
    pub allocmisses: ULONG,
    pub allochits: ULONG,
}
#[test]
fn bindgen_test_layout_npaged_lookaside_list__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<npaged_lookaside_list__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<npaged_lookaside_list__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(npaged_lookaside_list__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<npaged_lookaside_list__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(npaged_lookaside_list__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocmisses) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_1),
            "::",
            stringify!(allocmisses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allochits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_1),
            "::",
            stringify!(allochits)
        )
    );
}
impl Default for npaged_lookaside_list__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union npaged_lookaside_list__bindgen_ty_2 {
    pub freemisses: ULONG,
    pub freehits: ULONG,
}
#[test]
fn bindgen_test_layout_npaged_lookaside_list__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<npaged_lookaside_list__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<npaged_lookaside_list__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(npaged_lookaside_list__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<npaged_lookaside_list__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(npaged_lookaside_list__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freemisses) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_2),
            "::",
            stringify!(freemisses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freehits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_2),
            "::",
            stringify!(freehits)
        )
    );
}
impl Default for npaged_lookaside_list__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union npaged_lookaside_list__bindgen_ty_3 {
    pub lastallocmisses: ULONG,
    pub lastallochits: ULONG,
}
#[test]
fn bindgen_test_layout_npaged_lookaside_list__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<npaged_lookaside_list__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<npaged_lookaside_list__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(npaged_lookaside_list__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<npaged_lookaside_list__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(npaged_lookaside_list__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastallocmisses) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_3),
            "::",
            stringify!(lastallocmisses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastallochits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list__bindgen_ty_3),
            "::",
            stringify!(lastallochits)
        )
    );
}
impl Default for npaged_lookaside_list__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_npaged_lookaside_list() {
    const UNINIT: ::std::mem::MaybeUninit<npaged_lookaside_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<npaged_lookaside_list>(),
        96usize,
        concat!("Size of: ", stringify!(npaged_lookaside_list))
    );
    assert_eq!(
        ::std::mem::align_of::<npaged_lookaside_list>(),
        8usize,
        concat!("Alignment of ", stringify!(npaged_lookaside_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxdepth) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(maxdepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalallocs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(totalallocs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(u1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalfrees) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(totalfrees)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(u2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(pool_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(alloc_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_func) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(free_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lasttotallocs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(lasttotallocs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u3) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(u3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(npaged_lookaside_list),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for npaged_lookaside_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const device_registry_property_DevicePropertyDeviceDescription: device_registry_property = 0;
pub const device_registry_property_DevicePropertyHardwareID: device_registry_property = 1;
pub const device_registry_property_DevicePropertyCompatibleIDs: device_registry_property = 2;
pub const device_registry_property_DevicePropertyBootConfiguration: device_registry_property = 3;
pub const device_registry_property_DevicePropertyBootConfigurationTranslated:
    device_registry_property = 4;
pub const device_registry_property_DevicePropertyClassName: device_registry_property = 5;
pub const device_registry_property_DevicePropertyClassGuid: device_registry_property = 6;
pub const device_registry_property_DevicePropertyDriverKeyName: device_registry_property = 7;
pub const device_registry_property_DevicePropertyManufacturer: device_registry_property = 8;
pub const device_registry_property_DevicePropertyFriendlyName: device_registry_property = 9;
pub const device_registry_property_DevicePropertyLocationInformation: device_registry_property = 10;
pub const device_registry_property_DevicePropertyPhysicalDeviceObjectName:
    device_registry_property = 11;
pub const device_registry_property_DevicePropertyBusTypeGuid: device_registry_property = 12;
pub const device_registry_property_DevicePropertyLegacyBusType: device_registry_property = 13;
pub const device_registry_property_DevicePropertyBusNumber: device_registry_property = 14;
pub const device_registry_property_DevicePropertyEnumeratorName: device_registry_property = 15;
pub const device_registry_property_DevicePropertyAddress: device_registry_property = 16;
pub const device_registry_property_DevicePropertyUINumber: device_registry_property = 17;
pub const device_registry_property_DevicePropertyInstallState: device_registry_property = 18;
pub const device_registry_property_DevicePropertyRemovalPolicy: device_registry_property = 19;
pub type device_registry_property = ::std::os::raw::c_uint;
pub const trace_information_class_TraceIdClass: trace_information_class = 0;
pub const trace_information_class_TraceHandleClass: trace_information_class = 1;
pub const trace_information_class_TraceEnableFlagsClass: trace_information_class = 2;
pub const trace_information_class_TraceEnableLevelClass: trace_information_class = 3;
pub const trace_information_class_GlobalLoggerHandleClass: trace_information_class = 4;
pub const trace_information_class_EventLoggerHandleClass: trace_information_class = 5;
pub const trace_information_class_AllLoggerHandlesClass: trace_information_class = 6;
pub const trace_information_class_TraceHandleByNameClass: trace_information_class = 7;
pub type trace_information_class = ::std::os::raw::c_uint;
pub type PKSERVICE_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        interrupt: *mut kinterrupt,
        context: *mut ::std::os::raw::c_void,
    ) -> BOOLEAN,
>;
pub type PKSYNCHRONIZE_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void) -> BOOLEAN>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinterrupt {
    pub vector: ULONG,
    pub cpu_mask: KAFFINITY,
    pub lock: NT_SPIN_LOCK,
    pub actual_lock: *mut NT_SPIN_LOCK,
    pub shared: BOOLEAN,
    pub save_fp: BOOLEAN,
    pub u: kinterrupt__bindgen_ty_1,
    pub isr: PKSERVICE_ROUTINE,
    pub isr_ctx: *mut ::std::os::raw::c_void,
    pub list: nt_list,
    pub irql: KIRQL,
    pub synch_irql: KIRQL,
    pub mode: kinterrupt_mode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kinterrupt__bindgen_ty_1 {
    pub processor_number: CHAR,
}
#[test]
fn bindgen_test_layout_kinterrupt__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<kinterrupt__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kinterrupt__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(kinterrupt__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<kinterrupt__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(kinterrupt__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processor_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt__bindgen_ty_1),
            "::",
            stringify!(processor_number)
        )
    );
}
impl Default for kinterrupt__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_kinterrupt() {
    const UNINIT: ::std::mem::MaybeUninit<kinterrupt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kinterrupt>(),
        80usize,
        concat!("Size of: ", stringify!(kinterrupt))
    );
    assert_eq!(
        ::std::mem::align_of::<kinterrupt>(),
        8usize,
        concat!("Alignment of ", stringify!(kinterrupt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(cpu_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(actual_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_fp) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(save_fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(isr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr_ctx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(isr_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irql) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(irql)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).synch_irql) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(synch_irql)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(kinterrupt),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for kinterrupt {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct time_fields {
    pub year: CSHORT,
    pub month: CSHORT,
    pub day: CSHORT,
    pub hour: CSHORT,
    pub minute: CSHORT,
    pub second: CSHORT,
    pub milliseconds: CSHORT,
    pub weekday: CSHORT,
}
#[test]
fn bindgen_test_layout_time_fields() {
    const UNINIT: ::std::mem::MaybeUninit<time_fields> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<time_fields>(),
        16usize,
        concat!("Size of: ", stringify!(time_fields))
    );
    assert_eq!(
        ::std::mem::align_of::<time_fields>(),
        2usize,
        concat!("Alignment of ", stringify!(time_fields))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).milliseconds) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(milliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weekday) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(time_fields),
            "::",
            stringify!(weekday)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct object_attributes {
    pub length: ULONG,
    pub root_dir: *mut ::std::os::raw::c_void,
    pub name: *mut unicode_string,
    pub attributes: ULONG,
    pub security_descr: *mut ::std::os::raw::c_void,
    pub security_qos: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_object_attributes() {
    const UNINIT: ::std::mem::MaybeUninit<object_attributes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<object_attributes>(),
        48usize,
        concat!("Size of: ", stringify!(object_attributes))
    );
    assert_eq!(
        ::std::mem::align_of::<object_attributes>(),
        8usize,
        concat!("Alignment of ", stringify!(object_attributes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_dir) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(root_dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_descr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(security_descr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_qos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(object_attributes),
            "::",
            stringify!(security_qos)
        )
    );
}
impl Default for object_attributes {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFLS_CALLBACK_FUNCTION = ::std::option::Option<unsafe extern "C" fn(lpFlsData: PVOID)>;
pub type PCALLBACK_FUNCTION = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callback_func {
    pub func: PCALLBACK_FUNCTION,
    pub context: *mut ::std::os::raw::c_void,
    pub list: nt_list,
    pub object: *mut callback_object,
}
#[test]
fn bindgen_test_layout_callback_func() {
    const UNINIT: ::std::mem::MaybeUninit<callback_func> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<callback_func>(),
        40usize,
        concat!("Size of: ", stringify!(callback_func))
    );
    assert_eq!(
        ::std::mem::align_of::<callback_func>(),
        8usize,
        concat!("Alignment of ", stringify!(callback_func))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_func),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_func),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_func),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_func),
            "::",
            stringify!(object)
        )
    );
}
impl Default for callback_func {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct callback_object {
    pub lock: NT_SPIN_LOCK,
    pub list: nt_list,
    pub callback_funcs: nt_list,
    pub allow_multiple_callbacks: BOOLEAN,
    pub attributes: *mut object_attributes,
}
#[test]
fn bindgen_test_layout_callback_object() {
    const UNINIT: ::std::mem::MaybeUninit<callback_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<callback_object>(),
        56usize,
        concat!("Size of: ", stringify!(callback_object))
    );
    assert_eq!(
        ::std::mem::align_of::<callback_object>(),
        8usize,
        concat!("Alignment of ", stringify!(callback_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_object),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_object),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_funcs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_object),
            "::",
            stringify!(callback_funcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_multiple_callbacks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_object),
            "::",
            stringify!(allow_multiple_callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(callback_object),
            "::",
            stringify!(attributes)
        )
    );
}
impl Default for callback_object {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const section_inherit_ViewShare: section_inherit = 1;
pub const section_inherit_ViewUnmap: section_inherit = 2;
pub type section_inherit = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ksystem_time {
    pub low_part: ULONG,
    pub high1_time: LONG,
    pub high2_time: LONG,
}
#[test]
fn bindgen_test_layout_ksystem_time() {
    const UNINIT: ::std::mem::MaybeUninit<ksystem_time> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ksystem_time>(),
        12usize,
        concat!("Size of: ", stringify!(ksystem_time))
    );
    assert_eq!(
        ::std::mem::align_of::<ksystem_time>(),
        4usize,
        concat!("Alignment of ", stringify!(ksystem_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low_part) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ksystem_time),
            "::",
            stringify!(low_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high1_time) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ksystem_time),
            "::",
            stringify!(high1_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high2_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ksystem_time),
            "::",
            stringify!(high2_time)
        )
    );
}
pub const nt_product_type_nt_product_win_nt: nt_product_type = 1;
pub const nt_product_type_nt_product_lan_man_nt: nt_product_type = 2;
pub const nt_product_type_nt_product_server: nt_product_type = 3;
pub type nt_product_type = ::std::os::raw::c_uint;
pub const alt_arch_type_arch_type_standard: alt_arch_type = 0;
pub const alt_arch_type_arch_type_nex98x86: alt_arch_type = 1;
pub const alt_arch_type_end_alternatives: alt_arch_type = 2;
pub type alt_arch_type = ::std::os::raw::c_uint;
pub const EXCEPTION_DISPOSITION_ExceptionContinueExecution: EXCEPTION_DISPOSITION = 0;
pub const EXCEPTION_DISPOSITION_ExceptionContinueSearch: EXCEPTION_DISPOSITION = 1;
pub const EXCEPTION_DISPOSITION_ExceptionNestedException: EXCEPTION_DISPOSITION = 2;
pub const EXCEPTION_DISPOSITION_ExceptionCollidedUnwind: EXCEPTION_DISPOSITION = 3;
pub type EXCEPTION_DISPOSITION = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _EXCEPTION_RECORD {
    pub ExceptionCode: DWORD,
    pub ExceptionFlags: DWORD,
    pub ExceptionRecord: *mut _EXCEPTION_RECORD,
    pub ExceptionAddress: PVOID,
    pub NumberParameters: DWORD,
    pub ExceptionInformation: [ULONG_PTR; 15usize],
}
#[test]
fn bindgen_test_layout__EXCEPTION_RECORD() {
    const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_RECORD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_EXCEPTION_RECORD>(),
        152usize,
        concat!("Size of: ", stringify!(_EXCEPTION_RECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<_EXCEPTION_RECORD>(),
        8usize,
        concat!("Alignment of ", stringify!(_EXCEPTION_RECORD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionRecord) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionRecord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberParameters) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(NumberParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionInformation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionInformation)
        )
    );
}
impl Default for _EXCEPTION_RECORD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type EXCEPTION_RECORD = _EXCEPTION_RECORD;
pub type PEXCEPTION_RECORD = *mut _EXCEPTION_RECORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FLOATING_SAVE_AREA {
    pub ControlWord: DWORD,
    pub StatusWord: DWORD,
    pub TagWord: DWORD,
    pub ErrorOffset: DWORD,
    pub ErrorSelector: DWORD,
    pub DataOffset: DWORD,
    pub DataSelector: DWORD,
    pub RegisterArea: [BYTE; 80usize],
    pub Cr0NpxState: DWORD,
}
#[test]
fn bindgen_test_layout__FLOATING_SAVE_AREA() {
    const UNINIT: ::std::mem::MaybeUninit<_FLOATING_SAVE_AREA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FLOATING_SAVE_AREA>(),
        112usize,
        concat!("Size of: ", stringify!(_FLOATING_SAVE_AREA))
    );
    assert_eq!(
        ::std::mem::align_of::<_FLOATING_SAVE_AREA>(),
        4usize,
        concat!("Alignment of ", stringify!(_FLOATING_SAVE_AREA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ControlWord) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ControlWord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StatusWord) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(StatusWord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TagWord) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(TagWord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorOffset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ErrorOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorSelector) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ErrorSelector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataOffset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(DataOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataSelector) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(DataSelector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterArea) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(RegisterArea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Cr0NpxState) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(Cr0NpxState)
        )
    );
}
impl Default for _FLOATING_SAVE_AREA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FLOATING_SAVE_AREA = _FLOATING_SAVE_AREA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CONTEXT {
    pub ContextFlags: DWORD,
    pub Dr0: DWORD,
    pub Dr1: DWORD,
    pub Dr2: DWORD,
    pub Dr3: DWORD,
    pub Dr6: DWORD,
    pub Dr7: DWORD,
    pub FloatSave: FLOATING_SAVE_AREA,
    pub SegGs: DWORD,
    pub SegFs: DWORD,
    pub SegEs: DWORD,
    pub SegDs: DWORD,
    pub Edi: DWORD,
    pub Esi: DWORD,
    pub Ebx: DWORD,
    pub Edx: DWORD,
    pub Ecx: DWORD,
    pub Eax: DWORD,
    pub Ebp: DWORD,
    pub Eip: DWORD,
    pub SegCs: DWORD,
    pub EFlags: DWORD,
    pub Esp: DWORD,
    pub SegSs: DWORD,
    pub ExtendedRegisters: [BYTE; 512usize],
}
#[test]
fn bindgen_test_layout__CONTEXT() {
    const UNINIT: ::std::mem::MaybeUninit<_CONTEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CONTEXT>(),
        716usize,
        concat!("Size of: ", stringify!(_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CONTEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CONTEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContextFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(ContextFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr6) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dr7) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FloatSave) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(FloatSave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegGs) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegGs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegFs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegFs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegEs) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegEs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegDs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegDs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Edi) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Edi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Esi) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Esi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ebx) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ebx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Edx) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Edx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ecx) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ecx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Eax) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Eax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ebp) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ebp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Eip) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Eip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegCs) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegCs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EFlags) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(EFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Esp) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SegSs) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegSs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExtendedRegisters) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(ExtendedRegisters)
        )
    );
}
impl Default for _CONTEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CONTEXT = _CONTEXT;
pub type PEXCEPTION_HANDLER = ::std::option::Option<
    unsafe extern "C" fn(
        ExceptionRecord: *mut _EXCEPTION_RECORD,
        EstablisherFrame: *mut _EXCEPTION_FRAME,
        ContextRecord: *mut _CONTEXT,
        DispatcherContext: *mut *mut _EXCEPTION_FRAME,
    ) -> EXCEPTION_DISPOSITION,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _EXCEPTION_FRAME {
    pub prev: *mut _EXCEPTION_FRAME,
    pub handler: PEXCEPTION_HANDLER,
}
#[test]
fn bindgen_test_layout__EXCEPTION_FRAME() {
    const UNINIT: ::std::mem::MaybeUninit<_EXCEPTION_FRAME> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_EXCEPTION_FRAME>(),
        16usize,
        concat!("Size of: ", stringify!(_EXCEPTION_FRAME))
    );
    assert_eq!(
        ::std::mem::align_of::<_EXCEPTION_FRAME>(),
        8usize,
        concat!("Alignment of ", stringify!(_EXCEPTION_FRAME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_FRAME),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_FRAME),
            "::",
            stringify!(handler)
        )
    );
}
impl Default for _EXCEPTION_FRAME {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type EXCEPTION_FRAME = _EXCEPTION_FRAME;
pub type PEXCEPTION_FRAME = *mut _EXCEPTION_FRAME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RTL_BITMAP {
    pub SizeOfBitMap: ULONG,
    pub Buffer: LPBYTE,
}
#[test]
fn bindgen_test_layout__RTL_BITMAP() {
    const UNINIT: ::std::mem::MaybeUninit<_RTL_BITMAP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RTL_BITMAP>(),
        16usize,
        concat!("Size of: ", stringify!(_RTL_BITMAP))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_BITMAP>(),
        8usize,
        concat!("Alignment of ", stringify!(_RTL_BITMAP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfBitMap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_BITMAP),
            "::",
            stringify!(SizeOfBitMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_BITMAP),
            "::",
            stringify!(Buffer)
        )
    );
}
impl Default for _RTL_BITMAP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type RTL_BITMAP = _RTL_BITMAP;
pub type PRTL_BITMAP = *mut _RTL_BITMAP;
pub type PCRTL_BITMAP = *const RTL_BITMAP;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _RTL_BITMAP_RUN {
    pub StartingIndex: ULONG,
    pub NumberOfBits: ULONG,
}
#[test]
fn bindgen_test_layout__RTL_BITMAP_RUN() {
    const UNINIT: ::std::mem::MaybeUninit<_RTL_BITMAP_RUN> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_RTL_BITMAP_RUN>(),
        8usize,
        concat!("Size of: ", stringify!(_RTL_BITMAP_RUN))
    );
    assert_eq!(
        ::std::mem::align_of::<_RTL_BITMAP_RUN>(),
        4usize,
        concat!("Alignment of ", stringify!(_RTL_BITMAP_RUN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StartingIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_BITMAP_RUN),
            "::",
            stringify!(StartingIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfBits) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RTL_BITMAP_RUN),
            "::",
            stringify!(NumberOfBits)
        )
    );
}
pub type RTL_BITMAP_RUN = _RTL_BITMAP_RUN;
pub type PRTL_BITMAP_RUN = *mut _RTL_BITMAP_RUN;
pub type PCRTL_BITMAP_RUN = *const RTL_BITMAP_RUN;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KUSER_SHARED_DATA {
    pub tick_count: ULONG,
    pub tick_count_multiplier: ULONG,
    pub interrupt_time: ksystem_time,
    pub system_time: ksystem_time,
    pub time_zone_bias: ksystem_time,
    pub image_number_low: USHORT,
    pub image_number_high: USHORT,
    pub nt_system_root: [wchar_t; 260usize],
    pub max_stack_trace_depth: ULONG,
    pub crypto_exponent: ULONG,
    pub time_zone_id: ULONG,
    pub large_page_min: ULONG,
    pub reserved2: [ULONG; 7usize],
    pub nt_product_type: nt_product_type,
    pub product_type_is_valid: BOOLEAN,
    pub nt_major_version: ULONG,
    pub nt_minor_version: ULONG,
    pub processor_features: [BOOLEAN; 64usize],
    pub reserved1: ULONG,
    pub reserved3: ULONG,
    pub time_slip: LONG,
    pub alt_arch_type: alt_arch_type,
    pub system_expiration_date: LARGE_INTEGER,
    pub suite_mask: ULONG,
    pub kdbg_enabled: BOOLEAN,
    pub active_console: ULONG,
    pub dismount_count: ULONG,
    pub com_plus_package: ULONG,
    pub last_system_rite_event_tick_count: ULONG,
    pub num_phys_pages: ULONG,
    pub safe_boot_mode: BOOLEAN,
    pub trace_log: ULONG,
    pub fill0: ULONGLONG,
    pub sys_call: [ULONGLONG; 4usize],
    pub tick: _KUSER_SHARED_DATA__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KUSER_SHARED_DATA__bindgen_ty_1 {
    pub tick_count: ksystem_time,
    pub tick_count_quad: ULONG64,
}
#[test]
fn bindgen_test_layout__KUSER_SHARED_DATA__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_KUSER_SHARED_DATA__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_KUSER_SHARED_DATA__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(_KUSER_SHARED_DATA__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_KUSER_SHARED_DATA__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_KUSER_SHARED_DATA__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA__bindgen_ty_1),
            "::",
            stringify!(tick_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_count_quad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA__bindgen_ty_1),
            "::",
            stringify!(tick_count_quad)
        )
    );
}
impl Default for _KUSER_SHARED_DATA__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__KUSER_SHARED_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_KUSER_SHARED_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_KUSER_SHARED_DATA>(),
        1336usize,
        concat!("Size of: ", stringify!(_KUSER_SHARED_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_KUSER_SHARED_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_KUSER_SHARED_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(tick_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_count_multiplier) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(tick_count_multiplier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(interrupt_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_zone_bias) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(time_zone_bias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_number_low) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(image_number_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_number_high) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(image_number_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_system_root) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(nt_system_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_stack_trace_depth) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(max_stack_trace_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypto_exponent) as usize - ptr as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(crypto_exponent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_zone_id) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(time_zone_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_page_min) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(large_page_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_product_type) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(nt_product_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_type_is_valid) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(product_type_is_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_major_version) as usize - ptr as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(nt_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_minor_version) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(nt_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processor_features) as usize - ptr as usize },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(processor_features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_slip) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(time_slip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_arch_type) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(alt_arch_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_expiration_date) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(system_expiration_date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suite_mask) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(suite_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdbg_enabled) as usize - ptr as usize },
        1244usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(kdbg_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_console) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(active_console)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dismount_count) as usize - ptr as usize },
        1252usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(dismount_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).com_plus_package) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(com_plus_package)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_system_rite_event_tick_count) as usize - ptr as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(last_system_rite_event_tick_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_phys_pages) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(num_phys_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).safe_boot_mode) as usize - ptr as usize },
        1268usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(safe_boot_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_log) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(trace_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill0) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(fill0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_call) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(sys_call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(_KUSER_SHARED_DATA),
            "::",
            stringify!(tick)
        )
    );
}
impl Default for _KUSER_SHARED_DATA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type KUSER_SHARED_DATA = _KUSER_SHARED_DATA;
pub type PKUSER_SHARED_DATA = *mut _KUSER_SHARED_DATA;
pub type PRTL_QUERY_REGISTRY_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        name: *mut wchar_t,
        type_: ULONG,
        data: *mut ::std::os::raw::c_void,
        length: ULONG,
        context: *mut ::std::os::raw::c_void,
        entry: *mut ::std::os::raw::c_void,
    ) -> NTSTATUS,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtl_query_registry_table {
    pub query_func: PRTL_QUERY_REGISTRY_ROUTINE,
    pub flags: ULONG,
    pub name: *mut wchar_t,
    pub context: *mut ::std::os::raw::c_void,
    pub def_type: ULONG,
    pub def_data: *mut ::std::os::raw::c_void,
    pub def_length: ULONG,
}
#[test]
fn bindgen_test_layout_rtl_query_registry_table() {
    const UNINIT: ::std::mem::MaybeUninit<rtl_query_registry_table> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rtl_query_registry_table>(),
        56usize,
        concat!("Size of: ", stringify!(rtl_query_registry_table))
    );
    assert_eq!(
        ::std::mem::align_of::<rtl_query_registry_table>(),
        8usize,
        concat!("Alignment of ", stringify!(rtl_query_registry_table))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(query_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(def_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(def_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtl_query_registry_table),
            "::",
            stringify!(def_length)
        )
    );
}
impl Default for rtl_query_registry_table {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_remove_lock {
    pub removed: BOOLEAN,
    pub reserved: [BOOLEAN; 3usize],
    pub io_count: LONG,
    pub remove_event: nt_event,
}
#[test]
fn bindgen_test_layout_io_remove_lock() {
    const UNINIT: ::std::mem::MaybeUninit<io_remove_lock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_remove_lock>(),
        32usize,
        concat!("Size of: ", stringify!(io_remove_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<io_remove_lock>(),
        8usize,
        concat!("Alignment of ", stringify!(io_remove_lock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).removed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_remove_lock),
            "::",
            stringify!(removed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_remove_lock),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_remove_lock),
            "::",
            stringify!(io_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove_event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_remove_lock),
            "::",
            stringify!(remove_event)
        )
    );
}
impl Default for io_remove_lock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_error_log_packet {
    pub major_fn_code: UCHAR,
    pub retry_count: UCHAR,
    pub dump_data_size: USHORT,
    pub nr_of_strings: USHORT,
    pub string_offset: USHORT,
    pub event_category: USHORT,
    pub error_code: NTSTATUS,
    pub unique_error_value: ULONG,
    pub final_status: NTSTATUS,
    pub sequence_number: ULONG,
    pub io_control_code: ULONG,
    pub device_offset: LARGE_INTEGER,
    pub dump_data: [ULONG; 1usize],
}
#[test]
fn bindgen_test_layout_io_error_log_packet() {
    const UNINIT: ::std::mem::MaybeUninit<io_error_log_packet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_error_log_packet>(),
        48usize,
        concat!("Size of: ", stringify!(io_error_log_packet))
    );
    assert_eq!(
        ::std::mem::align_of::<io_error_log_packet>(),
        8usize,
        concat!("Alignment of ", stringify!(io_error_log_packet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major_fn_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(major_fn_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_count) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(retry_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dump_data_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(dump_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_of_strings) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(nr_of_strings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_offset) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(string_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_category) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(event_category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unique_error_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(unique_error_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).final_status) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(final_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_control_code) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(io_control_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(device_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dump_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_error_log_packet),
            "::",
            stringify!(dump_data)
        )
    );
}
pub const _PROCESSINFOCLASS_ProcessBasicInformation: _PROCESSINFOCLASS = 0;
pub const _PROCESSINFOCLASS_ProcessQuotaLimits: _PROCESSINFOCLASS = 1;
pub const _PROCESSINFOCLASS_ProcessIoCounters: _PROCESSINFOCLASS = 2;
pub const _PROCESSINFOCLASS_ProcessVmCounters: _PROCESSINFOCLASS = 3;
pub const _PROCESSINFOCLASS_ProcessTimes: _PROCESSINFOCLASS = 4;
pub const _PROCESSINFOCLASS_ProcessBasePriority: _PROCESSINFOCLASS = 5;
pub const _PROCESSINFOCLASS_ProcessRaisePriority: _PROCESSINFOCLASS = 6;
pub const _PROCESSINFOCLASS_ProcessDebugPort: _PROCESSINFOCLASS = 7;
pub const _PROCESSINFOCLASS_ProcessExceptionPort: _PROCESSINFOCLASS = 8;
pub const _PROCESSINFOCLASS_ProcessAccessToken: _PROCESSINFOCLASS = 9;
pub const _PROCESSINFOCLASS_ProcessLdtInformation: _PROCESSINFOCLASS = 10;
pub const _PROCESSINFOCLASS_ProcessLdtSize: _PROCESSINFOCLASS = 11;
pub const _PROCESSINFOCLASS_ProcessDefaultHardErrorMode: _PROCESSINFOCLASS = 12;
pub const _PROCESSINFOCLASS_ProcessIoPortHandlers: _PROCESSINFOCLASS = 13;
pub const _PROCESSINFOCLASS_ProcessPooledUsageAndLimits: _PROCESSINFOCLASS = 14;
pub const _PROCESSINFOCLASS_ProcessWorkingSetWatch: _PROCESSINFOCLASS = 15;
pub const _PROCESSINFOCLASS_ProcessUserModeIOPL: _PROCESSINFOCLASS = 16;
pub const _PROCESSINFOCLASS_ProcessEnableAlignmentFaultFixup: _PROCESSINFOCLASS = 17;
pub const _PROCESSINFOCLASS_ProcessPriorityClass: _PROCESSINFOCLASS = 18;
pub const _PROCESSINFOCLASS_ProcessWx86Information: _PROCESSINFOCLASS = 19;
pub const _PROCESSINFOCLASS_ProcessHandleCount: _PROCESSINFOCLASS = 20;
pub const _PROCESSINFOCLASS_ProcessAffinityMask: _PROCESSINFOCLASS = 21;
pub const _PROCESSINFOCLASS_ProcessPriorityBoost: _PROCESSINFOCLASS = 22;
pub const _PROCESSINFOCLASS_ProcessDeviceMap: _PROCESSINFOCLASS = 23;
pub const _PROCESSINFOCLASS_ProcessSessionInformation: _PROCESSINFOCLASS = 24;
pub const _PROCESSINFOCLASS_ProcessForegroundInformation: _PROCESSINFOCLASS = 25;
pub const _PROCESSINFOCLASS_ProcessWow64Information: _PROCESSINFOCLASS = 26;
pub const _PROCESSINFOCLASS_ProcessImageFileName: _PROCESSINFOCLASS = 27;
pub const _PROCESSINFOCLASS_ProcessLUIDDeviceMapsEnabled: _PROCESSINFOCLASS = 28;
pub const _PROCESSINFOCLASS_ProcessBreakOnTermination: _PROCESSINFOCLASS = 29;
pub const _PROCESSINFOCLASS_ProcessDebugObjectHandle: _PROCESSINFOCLASS = 30;
pub const _PROCESSINFOCLASS_ProcessDebugFlags: _PROCESSINFOCLASS = 31;
pub const _PROCESSINFOCLASS_ProcessHandleTracing: _PROCESSINFOCLASS = 32;
pub const _PROCESSINFOCLASS_ProcessExecuteFlags: _PROCESSINFOCLASS = 34;
pub const _PROCESSINFOCLASS_ProcessTlsInformation: _PROCESSINFOCLASS = 35;
pub const _PROCESSINFOCLASS_ProcessCookie: _PROCESSINFOCLASS = 36;
pub const _PROCESSINFOCLASS_ProcessImageInformation: _PROCESSINFOCLASS = 37;
pub const _PROCESSINFOCLASS_ProcessCycleTime: _PROCESSINFOCLASS = 38;
pub const _PROCESSINFOCLASS_ProcessPagePriority: _PROCESSINFOCLASS = 39;
pub const _PROCESSINFOCLASS_ProcessInstrumentationCallback: _PROCESSINFOCLASS = 40;
pub const _PROCESSINFOCLASS_ProcessThreadStackAllocation: _PROCESSINFOCLASS = 41;
pub const _PROCESSINFOCLASS_ProcessWorkingSetWatchEx: _PROCESSINFOCLASS = 42;
pub const _PROCESSINFOCLASS_ProcessImageFileNameWin32: _PROCESSINFOCLASS = 43;
pub const _PROCESSINFOCLASS_ProcessImageFileMapping: _PROCESSINFOCLASS = 44;
pub const _PROCESSINFOCLASS_ProcessAffinityUpdateMode: _PROCESSINFOCLASS = 45;
pub const _PROCESSINFOCLASS_ProcessMemoryAllocationMode: _PROCESSINFOCLASS = 46;
pub const _PROCESSINFOCLASS_ProcessGroupInformation: _PROCESSINFOCLASS = 47;
pub const _PROCESSINFOCLASS_ProcessTokenVirtualizationEnabled: _PROCESSINFOCLASS = 48;
pub const _PROCESSINFOCLASS_ProcessConsoleHostProcess: _PROCESSINFOCLASS = 49;
pub const _PROCESSINFOCLASS_ProcessWindowInformation: _PROCESSINFOCLASS = 50;
pub const _PROCESSINFOCLASS_MaxProcessInfoClass: _PROCESSINFOCLASS = 51;
pub type _PROCESSINFOCLASS = ::std::os::raw::c_uint;
pub use self::_PROCESSINFOCLASS as PROCESSINFOCLASS;
pub use self::_PROCESSINFOCLASS as PROCESS_INFORMATION_CLASS;
pub const _HEAP_INFORMATION_CLASS_HeapCompatibilityInformation: _HEAP_INFORMATION_CLASS = 0;
pub const _HEAP_INFORMATION_CLASS_HeapEnableTerminationOnCorruption: _HEAP_INFORMATION_CLASS = 1;
pub type _HEAP_INFORMATION_CLASS = ::std::os::raw::c_uint;
pub use self::_HEAP_INFORMATION_CLASS as HEAP_INFORMATION_CLASS;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_DOS_HEADER {
    pub e_magic: WORD,
    pub e_cblp: WORD,
    pub e_cp: WORD,
    pub e_crlc: WORD,
    pub e_cparhdr: WORD,
    pub e_minalloc: WORD,
    pub e_maxalloc: WORD,
    pub e_ss: WORD,
    pub e_sp: WORD,
    pub e_csum: WORD,
    pub e_ip: WORD,
    pub e_cs: WORD,
    pub e_lfarlc: WORD,
    pub e_ovno: WORD,
    pub e_res: [WORD; 4usize],
    pub e_oemid: WORD,
    pub e_oeminfo: WORD,
    pub e_res2: [WORD; 10usize],
    pub e_lfanew: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DOS_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DOS_HEADER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_DOS_HEADER>(),
        64usize,
        concat!("Size of: ", stringify!(_IMAGE_DOS_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_DOS_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_DOS_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_cblp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_cblp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_cp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_cp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_crlc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_crlc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_cparhdr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_cparhdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_minalloc) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_minalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_maxalloc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_maxalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ss) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_sp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_csum) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_csum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ip) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_cs) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_lfarlc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_lfarlc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_ovno) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_ovno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_res) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_oemid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_oemid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_oeminfo) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_oeminfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_res2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_res2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e_lfanew) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DOS_HEADER),
            "::",
            stringify!(e_lfanew)
        )
    );
}
pub type IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER;
pub type PIMAGE_DOS_HEADER = *mut _IMAGE_DOS_HEADER;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IMAGE_OS2_HEADER {
    pub ne_magic: WORD,
    pub ne_ver: BYTE,
    pub ne_rev: BYTE,
    pub ne_enttab: WORD,
    pub ne_cbenttab: WORD,
    pub ne_crc: LONG,
    pub ne_flags: WORD,
    pub ne_autodata: WORD,
    pub ne_heap: WORD,
    pub ne_stack: WORD,
    pub ne_csip: DWORD,
    pub ne_sssp: DWORD,
    pub ne_cseg: WORD,
    pub ne_cmod: WORD,
    pub ne_cbnrestab: WORD,
    pub ne_segtab: WORD,
    pub ne_rsrctab: WORD,
    pub ne_restab: WORD,
    pub ne_modtab: WORD,
    pub ne_imptab: WORD,
    pub ne_nrestab: DWORD,
    pub ne_cmovent: WORD,
    pub ne_align: WORD,
    pub ne_cres: WORD,
    pub ne_exetyp: BYTE,
    pub ne_flagsothers: BYTE,
    pub ne_pretthunks: WORD,
    pub ne_psegrefbytes: WORD,
    pub ne_swaparea: WORD,
    pub ne_expver: WORD,
}
#[test]
fn bindgen_test_layout_IMAGE_OS2_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<IMAGE_OS2_HEADER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IMAGE_OS2_HEADER>(),
        64usize,
        concat!("Size of: ", stringify!(IMAGE_OS2_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<IMAGE_OS2_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(IMAGE_OS2_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_ver) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_rev) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_rev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_enttab) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_enttab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cbenttab) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cbenttab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_crc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_crc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_autodata) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_autodata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_heap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_stack) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_csip) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_csip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_sssp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_sssp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cseg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cseg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cmod) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cbnrestab) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cbnrestab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_segtab) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_segtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_rsrctab) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_rsrctab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_restab) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_restab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_modtab) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_modtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_imptab) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_imptab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_nrestab) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_nrestab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cmovent) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cmovent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_align) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_cres) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_cres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_exetyp) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_exetyp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_flagsothers) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_flagsothers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_pretthunks) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_pretthunks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_psegrefbytes) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_psegrefbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_swaparea) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_swaparea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne_expver) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_OS2_HEADER),
            "::",
            stringify!(ne_expver)
        )
    );
}
pub type PIMAGE_OS2_HEADER = *mut IMAGE_OS2_HEADER;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_VXD_HEADER {
    pub e32_magic: WORD,
    pub e32_border: BYTE,
    pub e32_worder: BYTE,
    pub e32_level: DWORD,
    pub e32_cpu: WORD,
    pub e32_os: WORD,
    pub e32_ver: DWORD,
    pub e32_mflags: DWORD,
    pub e32_mpages: DWORD,
    pub e32_startobj: DWORD,
    pub e32_eip: DWORD,
    pub e32_stackobj: DWORD,
    pub e32_esp: DWORD,
    pub e32_pagesize: DWORD,
    pub e32_lastpagesize: DWORD,
    pub e32_fixupsize: DWORD,
    pub e32_fixupsum: DWORD,
    pub e32_ldrsize: DWORD,
    pub e32_ldrsum: DWORD,
    pub e32_objtab: DWORD,
    pub e32_objcnt: DWORD,
    pub e32_objmap: DWORD,
    pub e32_itermap: DWORD,
    pub e32_rsrctab: DWORD,
    pub e32_rsrccnt: DWORD,
    pub e32_restab: DWORD,
    pub e32_enttab: DWORD,
    pub e32_dirtab: DWORD,
    pub e32_dircnt: DWORD,
    pub e32_fpagetab: DWORD,
    pub e32_frectab: DWORD,
    pub e32_impmod: DWORD,
    pub e32_impmodcnt: DWORD,
    pub e32_impproc: DWORD,
    pub e32_pagesum: DWORD,
    pub e32_datapage: DWORD,
    pub e32_preload: DWORD,
    pub e32_nrestab: DWORD,
    pub e32_cbnrestab: DWORD,
    pub e32_nressum: DWORD,
    pub e32_autodata: DWORD,
    pub e32_debuginfo: DWORD,
    pub e32_debuglen: DWORD,
    pub e32_instpreload: DWORD,
    pub e32_instdemand: DWORD,
    pub e32_heapsize: DWORD,
    pub e32_res3: [BYTE; 12usize],
    pub e32_winresoff: DWORD,
    pub e32_winreslen: DWORD,
    pub e32_devid: WORD,
    pub e32_ddkver: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_VXD_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_VXD_HEADER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_VXD_HEADER>(),
        196usize,
        concat!("Size of: ", stringify!(_IMAGE_VXD_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_VXD_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_VXD_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_border) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_worder) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_worder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_cpu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_os) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_os)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_ver) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_mflags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_mflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_mpages) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_mpages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_startobj) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_startobj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_eip) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_eip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_stackobj) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_stackobj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_esp) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_pagesize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_pagesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_lastpagesize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_lastpagesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_fixupsize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_fixupsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_fixupsum) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_fixupsum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_ldrsize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_ldrsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_ldrsum) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_ldrsum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_objtab) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_objtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_objcnt) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_objcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_objmap) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_objmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_itermap) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_itermap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_rsrctab) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_rsrctab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_rsrccnt) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_rsrccnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_restab) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_restab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_enttab) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_enttab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_dirtab) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_dirtab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_dircnt) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_dircnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_fpagetab) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_fpagetab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_frectab) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_frectab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_impmod) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_impmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_impmodcnt) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_impmodcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_impproc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_impproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_pagesum) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_pagesum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_datapage) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_datapage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_preload) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_preload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_nrestab) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_nrestab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_cbnrestab) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_cbnrestab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_nressum) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_nressum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_autodata) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_autodata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_debuginfo) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_debuginfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_debuglen) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_debuglen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_instpreload) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_instpreload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_instdemand) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_instdemand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_heapsize) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_heapsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_res3) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_res3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_winresoff) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_winresoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_winreslen) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_winreslen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_devid) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e32_ddkver) as usize - ptr as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_VXD_HEADER),
            "::",
            stringify!(e32_ddkver)
        )
    );
}
pub type IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER;
pub type PIMAGE_VXD_HEADER = *mut _IMAGE_VXD_HEADER;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_FILE_HEADER {
    pub Machine: WORD,
    pub NumberOfSections: WORD,
    pub TimeDateStamp: DWORD,
    pub PointerToSymbolTable: DWORD,
    pub NumberOfSymbols: DWORD,
    pub SizeOfOptionalHeader: WORD,
    pub Characteristics: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_FILE_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_FILE_HEADER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_FILE_HEADER>(),
        20usize,
        concat!("Size of: ", stringify!(_IMAGE_FILE_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_FILE_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_FILE_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Machine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(Machine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSections) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(NumberOfSections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToSymbolTable) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(PointerToSymbolTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfSymbols) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(NumberOfSymbols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfOptionalHeader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(SizeOfOptionalHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_FILE_HEADER),
            "::",
            stringify!(Characteristics)
        )
    );
}
pub type IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;
pub type PIMAGE_FILE_HEADER = *mut _IMAGE_FILE_HEADER;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_DATA_DIRECTORY {
    pub VirtualAddress: DWORD,
    pub Size: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_DATA_DIRECTORY() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_DATA_DIRECTORY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_DATA_DIRECTORY>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_DATA_DIRECTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_DATA_DIRECTORY>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_DATA_DIRECTORY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DATA_DIRECTORY),
            "::",
            stringify!(VirtualAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_DATA_DIRECTORY),
            "::",
            stringify!(Size)
        )
    );
}
pub type IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;
pub type PIMAGE_DATA_DIRECTORY = *mut _IMAGE_DATA_DIRECTORY;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER32 {
    pub Magic: WORD,
    pub MajorLinkerVersion: BYTE,
    pub MinorLinkerVersion: BYTE,
    pub SizeOfCode: DWORD,
    pub SizeOfInitializedData: DWORD,
    pub SizeOfUninitializedData: DWORD,
    pub AddressOfEntryPoint: DWORD,
    pub BaseOfCode: DWORD,
    pub BaseOfData: DWORD,
    pub ImageBase: DWORD,
    pub SectionAlignment: DWORD,
    pub FileAlignment: DWORD,
    pub MajorOperatingSystemVersion: WORD,
    pub MinorOperatingSystemVersion: WORD,
    pub MajorImageVersion: WORD,
    pub MinorImageVersion: WORD,
    pub MajorSubsystemVersion: WORD,
    pub MinorSubsystemVersion: WORD,
    pub Win32VersionValue: DWORD,
    pub SizeOfImage: DWORD,
    pub SizeOfHeaders: DWORD,
    pub CheckSum: DWORD,
    pub Subsystem: WORD,
    pub DllCharacteristics: WORD,
    pub SizeOfStackReserve: DWORD,
    pub SizeOfStackCommit: DWORD,
    pub SizeOfHeapReserve: DWORD,
    pub SizeOfHeapCommit: DWORD,
    pub LoaderFlags: DWORD,
    pub NumberOfRvaAndSizes: DWORD,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[test]
fn bindgen_test_layout__IMAGE_OPTIONAL_HEADER32() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_OPTIONAL_HEADER32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER32>(),
        224usize,
        concat!("Size of: ", stringify!(_IMAGE_OPTIONAL_HEADER32))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER32>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_OPTIONAL_HEADER32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(Magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorLinkerVersion) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MajorLinkerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorLinkerVersion) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MinorLinkerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInitializedData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfInitializedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfUninitializedData) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfUninitializedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfEntryPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(AddressOfEntryPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaseOfCode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(BaseOfCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaseOfData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(BaseOfData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(ImageBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SectionAlignment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SectionAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileAlignment) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(FileAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorOperatingSystemVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MajorOperatingSystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorOperatingSystemVersion) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MinorOperatingSystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorImageVersion) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MajorImageVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorImageVersion) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MinorImageVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorSubsystemVersion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MajorSubsystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorSubsystemVersion) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(MinorSubsystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Win32VersionValue) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(Win32VersionValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeaders) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfHeaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(CheckSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Subsystem) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(Subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DllCharacteristics) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(DllCharacteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackReserve) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfStackReserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackCommit) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfStackCommit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapReserve) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfHeapReserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapCommit) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(SizeOfHeapCommit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoaderFlags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(LoaderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRvaAndSizes) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(NumberOfRvaAndSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataDirectory) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER32),
            "::",
            stringify!(DataDirectory)
        )
    );
}
pub type IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER32;
pub type PIMAGE_OPTIONAL_HEADER32 = *mut _IMAGE_OPTIONAL_HEADER32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER64 {
    pub Magic: WORD,
    pub MajorLinkerVersion: BYTE,
    pub MinorLinkerVersion: BYTE,
    pub SizeOfCode: DWORD,
    pub SizeOfInitializedData: DWORD,
    pub SizeOfUninitializedData: DWORD,
    pub AddressOfEntryPoint: DWORD,
    pub BaseOfCode: DWORD,
    pub ImageBase: ULONGLONG,
    pub SectionAlignment: DWORD,
    pub FileAlignment: DWORD,
    pub MajorOperatingSystemVersion: WORD,
    pub MinorOperatingSystemVersion: WORD,
    pub MajorImageVersion: WORD,
    pub MinorImageVersion: WORD,
    pub MajorSubsystemVersion: WORD,
    pub MinorSubsystemVersion: WORD,
    pub Win32VersionValue: DWORD,
    pub SizeOfImage: DWORD,
    pub SizeOfHeaders: DWORD,
    pub CheckSum: DWORD,
    pub Subsystem: WORD,
    pub DllCharacteristics: WORD,
    pub SizeOfStackReserve: ULONGLONG,
    pub SizeOfStackCommit: ULONGLONG,
    pub SizeOfHeapReserve: ULONGLONG,
    pub SizeOfHeapCommit: ULONGLONG,
    pub LoaderFlags: DWORD,
    pub NumberOfRvaAndSizes: DWORD,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[test]
fn bindgen_test_layout__IMAGE_OPTIONAL_HEADER64() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_OPTIONAL_HEADER64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER64>(),
        240usize,
        concat!("Size of: ", stringify!(_IMAGE_OPTIONAL_HEADER64))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER64>(),
        8usize,
        concat!("Alignment of ", stringify!(_IMAGE_OPTIONAL_HEADER64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Magic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(Magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorLinkerVersion) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MajorLinkerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorLinkerVersion) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MinorLinkerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfCode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfInitializedData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfInitializedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfUninitializedData) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfUninitializedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfEntryPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(AddressOfEntryPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BaseOfCode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(BaseOfCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageBase) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(ImageBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SectionAlignment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SectionAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileAlignment) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(FileAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorOperatingSystemVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MajorOperatingSystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorOperatingSystemVersion) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MinorOperatingSystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorImageVersion) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MajorImageVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorImageVersion) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MinorImageVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorSubsystemVersion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MajorSubsystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorSubsystemVersion) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(MinorSubsystemVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Win32VersionValue) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(Win32VersionValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfImage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeaders) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfHeaders)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(CheckSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Subsystem) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(Subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DllCharacteristics) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(DllCharacteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackReserve) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfStackReserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfStackCommit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfStackCommit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapReserve) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfHeapReserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfHeapCommit) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(SizeOfHeapCommit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoaderFlags) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(LoaderFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRvaAndSizes) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(NumberOfRvaAndSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataDirectory) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_OPTIONAL_HEADER64),
            "::",
            stringify!(DataDirectory)
        )
    );
}
pub type IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;
pub type PIMAGE_OPTIONAL_HEADER64 = *mut _IMAGE_OPTIONAL_HEADER64;
pub type IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER32;
pub type PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS32 {
    pub Signature: DWORD,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER32,
}
#[test]
fn bindgen_test_layout__IMAGE_NT_HEADERS32() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_NT_HEADERS32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_NT_HEADERS32>(),
        248usize,
        concat!("Size of: ", stringify!(_IMAGE_NT_HEADERS32))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_NT_HEADERS32>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_NT_HEADERS32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS32),
            "::",
            stringify!(Signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileHeader) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS32),
            "::",
            stringify!(FileHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OptionalHeader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS32),
            "::",
            stringify!(OptionalHeader)
        )
    );
}
pub type IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS32;
pub type PIMAGE_NT_HEADERS32 = *mut _IMAGE_NT_HEADERS32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS64 {
    pub Signature: DWORD,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER64,
}
#[test]
fn bindgen_test_layout__IMAGE_NT_HEADERS64() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_NT_HEADERS64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_NT_HEADERS64>(),
        264usize,
        concat!("Size of: ", stringify!(_IMAGE_NT_HEADERS64))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_NT_HEADERS64>(),
        8usize,
        concat!("Alignment of ", stringify!(_IMAGE_NT_HEADERS64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS64),
            "::",
            stringify!(Signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FileHeader) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS64),
            "::",
            stringify!(FileHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OptionalHeader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_NT_HEADERS64),
            "::",
            stringify!(OptionalHeader)
        )
    );
}
pub type IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64;
pub type PIMAGE_NT_HEADERS64 = *mut _IMAGE_NT_HEADERS64;
pub type IMAGE_NT_HEADERS = IMAGE_NT_HEADERS32;
pub type PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_SECTION_HEADER {
    pub Name: [BYTE; 8usize],
    pub Misc: _IMAGE_SECTION_HEADER__bindgen_ty_1,
    pub VirtualAddress: DWORD,
    pub SizeOfRawData: DWORD,
    pub PointerToRawData: DWORD,
    pub PointerToRelocations: DWORD,
    pub PointerToLinenumbers: DWORD,
    pub NumberOfRelocations: WORD,
    pub NumberOfLinenumbers: WORD,
    pub Characteristics: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_SECTION_HEADER__bindgen_ty_1 {
    pub PhysicalAddress: DWORD,
    pub VirtualSize: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_SECTION_HEADER__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SECTION_HEADER__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhysicalAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1),
            "::",
            stringify!(PhysicalAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER__bindgen_ty_1),
            "::",
            stringify!(VirtualSize)
        )
    );
}
impl Default for _IMAGE_SECTION_HEADER__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_SECTION_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SECTION_HEADER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_SECTION_HEADER>(),
        40usize,
        concat!("Size of: ", stringify!(_IMAGE_SECTION_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_SECTION_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_SECTION_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Misc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(Misc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(VirtualAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfRawData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(SizeOfRawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToRawData) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(PointerToRawData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToRelocations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(PointerToRelocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToLinenumbers) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(PointerToLinenumbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRelocations) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(NumberOfRelocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(NumberOfLinenumbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SECTION_HEADER),
            "::",
            stringify!(Characteristics)
        )
    );
}
impl Default for _IMAGE_SECTION_HEADER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER;
pub type PIMAGE_SECTION_HEADER = *mut _IMAGE_SECTION_HEADER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_SYMBOL {
    pub N: _IMAGE_SYMBOL__bindgen_ty_1,
    pub Value: DWORD,
    pub SectionNumber: SHORT,
    pub Type: WORD,
    pub StorageClass: BYTE,
    pub NumberOfAuxSymbols: BYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_SYMBOL__bindgen_ty_1 {
    pub ShortName: [BYTE; 8usize],
    pub Name: _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1,
    pub LongName: [DWORD; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
    pub Short: DWORD,
    pub Long: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Short) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Short)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Long) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Long)
        )
    );
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_SYMBOL__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_SYMBOL__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShortName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(ShortName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LongName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(LongName)
        )
    );
}
impl Default for _IMAGE_SYMBOL__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_SYMBOL() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_SYMBOL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_SYMBOL>(),
        20usize,
        concat!("Size of: ", stringify!(_IMAGE_SYMBOL))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_SYMBOL>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_SYMBOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(Value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SectionNumber) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(SectionNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StorageClass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(StorageClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfAuxSymbols) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_SYMBOL),
            "::",
            stringify!(NumberOfAuxSymbols)
        )
    );
}
impl Default for _IMAGE_SYMBOL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_SYMBOL = _IMAGE_SYMBOL;
pub type PIMAGE_SYMBOL = *mut IMAGE_SYMBOL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_LINENUMBER {
    pub Type: _IMAGE_LINENUMBER__bindgen_ty_1,
    pub Linenumber: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_LINENUMBER__bindgen_ty_1 {
    pub SymbolTableIndex: DWORD,
    pub VirtualAddress: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_LINENUMBER__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LINENUMBER__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_LINENUMBER__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_LINENUMBER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_LINENUMBER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_LINENUMBER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SymbolTableIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_LINENUMBER__bindgen_ty_1),
            "::",
            stringify!(SymbolTableIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_LINENUMBER__bindgen_ty_1),
            "::",
            stringify!(VirtualAddress)
        )
    );
}
impl Default for _IMAGE_LINENUMBER__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_LINENUMBER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_LINENUMBER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_LINENUMBER>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_LINENUMBER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_LINENUMBER>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_LINENUMBER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_LINENUMBER),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Linenumber) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_LINENUMBER),
            "::",
            stringify!(Linenumber)
        )
    );
}
impl Default for _IMAGE_LINENUMBER {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_LINENUMBER = _IMAGE_LINENUMBER;
pub type PIMAGE_LINENUMBER = *mut IMAGE_LINENUMBER;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL {
    pub Sym: _IMAGE_AUX_SYMBOL__bindgen_ty_1,
    pub File: _IMAGE_AUX_SYMBOL__bindgen_ty_2,
    pub Section: _IMAGE_AUX_SYMBOL__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1 {
    pub TagIndex: DWORD,
    pub Misc: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1,
    pub FcnAry: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2,
    pub TvIndex: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
    pub LnSz: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub TotalSize: DWORD,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub Linenumber: WORD,
    pub Size: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Linenumber) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Linenumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Size)
        )
    );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LnSz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(LnSz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TotalSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(TotalSize)
        )
    );
}
impl Default for _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 {
    pub Function: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub Array: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub PointerToLinenumber: DWORD,
    pub PointerToNextFunction: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToLinenumber) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(PointerToLinenumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PointerToNextFunction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(PointerToNextFunction)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
    pub Dimension: [WORD; 4usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Dimension) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(Dimension)
        )
    );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Array)
        )
    );
}
impl Default for _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TagIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(TagIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Misc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(Misc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FcnAry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(FcnAry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TvIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_1),
            "::",
            stringify!(TvIndex)
        )
    );
}
impl Default for _IMAGE_AUX_SYMBOL__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_2 {
    pub Name: [BYTE; 18usize],
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>(),
        18usize,
        concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_2),
            "::",
            stringify!(Name)
        )
    );
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_3 {
    pub Length: DWORD,
    pub NumberOfRelocations: WORD,
    pub NumberOfLinenumbers: WORD,
    pub CheckSum: DWORD,
    pub Number: SHORT,
    pub Selection: BYTE,
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfRelocations) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(NumberOfRelocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfLinenumbers) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(NumberOfLinenumbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CheckSum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(CheckSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Number) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Selection) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL__bindgen_ty_3),
            "::",
            stringify!(Selection)
        )
    );
}
#[test]
fn bindgen_test_layout__IMAGE_AUX_SYMBOL() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_AUX_SYMBOL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_AUX_SYMBOL>(),
        20usize,
        concat!("Size of: ", stringify!(_IMAGE_AUX_SYMBOL))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_AUX_SYMBOL>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_AUX_SYMBOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Sym) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL),
            "::",
            stringify!(Sym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).File) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL),
            "::",
            stringify!(File)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Section) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_AUX_SYMBOL),
            "::",
            stringify!(Section)
        )
    );
}
impl Default for _IMAGE_AUX_SYMBOL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL;
pub type PIMAGE_AUX_SYMBOL = *mut IMAGE_AUX_SYMBOL;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_EXPORT_DIRECTORY {
    pub Characteristics: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub Name: DWORD,
    pub Base: DWORD,
    pub NumberOfFunctions: DWORD,
    pub NumberOfNames: DWORD,
    pub AddressOfFunctions: DWORD,
    pub AddressOfNames: DWORD,
    pub AddressOfNameOrdinals: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_EXPORT_DIRECTORY() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_EXPORT_DIRECTORY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_EXPORT_DIRECTORY>(),
        40usize,
        concat!("Size of: ", stringify!(_IMAGE_EXPORT_DIRECTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_EXPORT_DIRECTORY>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_EXPORT_DIRECTORY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(Characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(MajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(MinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(Base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfFunctions) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(NumberOfFunctions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfNames) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(NumberOfNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfFunctions) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(AddressOfFunctions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfNames) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(AddressOfNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfNameOrdinals) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_EXPORT_DIRECTORY),
            "::",
            stringify!(AddressOfNameOrdinals)
        )
    );
}
pub type IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY;
pub type PIMAGE_EXPORT_DIRECTORY = *mut _IMAGE_EXPORT_DIRECTORY;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_IMPORT_BY_NAME {
    pub Hint: WORD,
    pub Name: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_BY_NAME() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_BY_NAME> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_IMPORT_BY_NAME>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_IMPORT_BY_NAME))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_IMPORT_BY_NAME>(),
        2usize,
        concat!("Alignment of ", stringify!(_IMAGE_IMPORT_BY_NAME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_BY_NAME),
            "::",
            stringify!(Hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_BY_NAME),
            "::",
            stringify!(Name)
        )
    );
}
pub type IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME;
pub type PIMAGE_IMPORT_BY_NAME = *mut _IMAGE_IMPORT_BY_NAME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA32 {
    pub u1: _IMAGE_THUNK_DATA32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA32__bindgen_ty_1 {
    pub ForwarderString: DWORD,
    pub Function: DWORD,
    pub Ordinal: DWORD,
    pub AddressOfData: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA32__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA32__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForwarderString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
            "::",
            stringify!(ForwarderString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
            "::",
            stringify!(Function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ordinal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
            "::",
            stringify!(Ordinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA32__bindgen_ty_1),
            "::",
            stringify!(AddressOfData)
        )
    );
}
impl Default for _IMAGE_THUNK_DATA32__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA32() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_THUNK_DATA32>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA32))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_THUNK_DATA32>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_THUNK_DATA32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA32),
            "::",
            stringify!(u1)
        )
    );
}
impl Default for _IMAGE_THUNK_DATA32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32;
pub type PIMAGE_THUNK_DATA32 = *mut _IMAGE_THUNK_DATA32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA64 {
    pub u1: _IMAGE_THUNK_DATA64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA64__bindgen_ty_1 {
    pub ForwarderString: ULONGLONG,
    pub Function: ULONGLONG,
    pub Ordinal: ULONGLONG,
    pub AddressOfData: ULONGLONG,
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA64__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA64__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForwarderString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
            "::",
            stringify!(ForwarderString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
            "::",
            stringify!(Function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ordinal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
            "::",
            stringify!(Ordinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA64__bindgen_ty_1),
            "::",
            stringify!(AddressOfData)
        )
    );
}
impl Default for _IMAGE_THUNK_DATA64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_THUNK_DATA64() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_THUNK_DATA64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_THUNK_DATA64>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_THUNK_DATA64))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_THUNK_DATA64>(),
        8usize,
        concat!("Alignment of ", stringify!(_IMAGE_THUNK_DATA64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_THUNK_DATA64),
            "::",
            stringify!(u1)
        )
    );
}
impl Default for _IMAGE_THUNK_DATA64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64;
pub type PIMAGE_THUNK_DATA64 = *mut _IMAGE_THUNK_DATA64;
pub type IMAGE_THUNK_DATA = IMAGE_THUNK_DATA32;
pub type PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA32;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _IMAGE_IMPORT_DESCRIPTOR {
    pub u: _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1,
    pub TimeDateStamp: DWORD,
    pub ForwarderChain: DWORD,
    pub Name: DWORD,
    pub FirstThunk: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1 {
    pub Characteristics: DWORD,
    pub OriginalFirstThunk: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1),
            "::",
            stringify!(Characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OriginalFirstThunk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1),
            "::",
            stringify!(OriginalFirstThunk)
        )
    );
}
impl Default for _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_IMPORT_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_IMPORT_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR>(),
        20usize,
        concat!("Size of: ", stringify!(_IMAGE_IMPORT_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR>(),
        1usize,
        concat!("Alignment of ", stringify!(_IMAGE_IMPORT_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForwarderChain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR),
            "::",
            stringify!(ForwarderChain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FirstThunk) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_IMPORT_DESCRIPTOR),
            "::",
            stringify!(FirstThunk)
        )
    );
}
impl Default for _IMAGE_IMPORT_DESCRIPTOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR;
pub type PIMAGE_IMPORT_DESCRIPTOR = *mut _IMAGE_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    pub TimeDateStamp: DWORD,
    pub OffsetModuleName: WORD,
    pub NumberOfModuleForwarderRefs: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BOUND_IMPORT_DESCRIPTOR() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BOUND_IMPORT_DESCRIPTOR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetModuleName) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
            "::",
            stringify!(OffsetModuleName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfModuleForwarderRefs) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_IMPORT_DESCRIPTOR),
            "::",
            stringify!(NumberOfModuleForwarderRefs)
        )
    );
}
pub type IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub type PIMAGE_BOUND_IMPORT_DESCRIPTOR = *mut _IMAGE_BOUND_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_BOUND_FORWARDER_REF {
    pub TimeDateStamp: DWORD,
    pub OffsetModuleName: WORD,
    pub Reserved: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_BOUND_FORWARDER_REF() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BOUND_FORWARDER_REF> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_BOUND_FORWARDER_REF>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_BOUND_FORWARDER_REF))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_BOUND_FORWARDER_REF>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_BOUND_FORWARDER_REF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_FORWARDER_REF),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetModuleName) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_FORWARDER_REF),
            "::",
            stringify!(OffsetModuleName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BOUND_FORWARDER_REF),
            "::",
            stringify!(Reserved)
        )
    );
}
pub type IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF;
pub type PIMAGE_BOUND_FORWARDER_REF = *mut _IMAGE_BOUND_FORWARDER_REF;
#[repr(C)]
#[derive(Default)]
pub struct _IMAGE_BASE_RELOCATION {
    pub VirtualAddress: DWORD,
    pub SizeOfBlock: DWORD,
    pub TypeOffset: __IncompleteArrayField<WORD>,
}
#[test]
fn bindgen_test_layout__IMAGE_BASE_RELOCATION() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_BASE_RELOCATION> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_BASE_RELOCATION>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_BASE_RELOCATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_BASE_RELOCATION>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_BASE_RELOCATION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BASE_RELOCATION),
            "::",
            stringify!(VirtualAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfBlock) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BASE_RELOCATION),
            "::",
            stringify!(SizeOfBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TypeOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_BASE_RELOCATION),
            "::",
            stringify!(TypeOffset)
        )
    );
}
pub type IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION;
pub type PIMAGE_BASE_RELOCATION = *mut _IMAGE_BASE_RELOCATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RELOCATION {
    pub DUMMYUNIONNAME: _IMAGE_RELOCATION__bindgen_ty_1,
    pub SymbolTableIndex: DWORD,
    pub Type: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RELOCATION__bindgen_ty_1 {
    pub VirtualAddress: DWORD,
    pub RelocCount: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RELOCATION__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RELOCATION__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RELOCATION__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_RELOCATION__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RELOCATION__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_RELOCATION__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RELOCATION__bindgen_ty_1),
            "::",
            stringify!(VirtualAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RelocCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RELOCATION__bindgen_ty_1),
            "::",
            stringify!(RelocCount)
        )
    );
}
impl Default for _IMAGE_RELOCATION__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_RELOCATION() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RELOCATION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RELOCATION>(),
        12usize,
        concat!("Size of: ", stringify!(_IMAGE_RELOCATION))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RELOCATION>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_RELOCATION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYUNIONNAME) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RELOCATION),
            "::",
            stringify!(DUMMYUNIONNAME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SymbolTableIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RELOCATION),
            "::",
            stringify!(SymbolTableIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RELOCATION),
            "::",
            stringify!(Type)
        )
    );
}
impl Default for _IMAGE_RELOCATION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_RELOCATION = _IMAGE_RELOCATION;
pub type PIMAGE_RELOCATION = *mut _IMAGE_RELOCATION;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    pub Name: [BYTE; 16usize],
    pub Date: [BYTE; 12usize],
    pub UserID: [BYTE; 6usize],
    pub GroupID: [BYTE; 6usize],
    pub Mode: [BYTE; 8usize],
    pub Size: [BYTE; 10usize],
    pub EndHeader: [BYTE; 2usize],
}
#[test]
fn bindgen_test_layout__IMAGE_ARCHIVE_MEMBER_HEADER() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_ARCHIVE_MEMBER_HEADER> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>(),
        60usize,
        concat!("Size of: ", stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>(),
        1usize,
        concat!("Alignment of ", stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GroupID) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(GroupID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EndHeader) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_ARCHIVE_MEMBER_HEADER),
            "::",
            stringify!(EndHeader)
        )
    );
}
pub type IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER;
pub type PIMAGE_ARCHIVE_MEMBER_HEADER = *mut _IMAGE_ARCHIVE_MEMBER_HEADER;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY {
    pub Characteristics: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub NumberOfNamedEntries: WORD,
    pub NumberOfIdEntries: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY>(),
        16usize,
        concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DIRECTORY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(Characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TimeDateStamp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(TimeDateStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorVersion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(MajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorVersion) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(MinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfNamedEntries) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(NumberOfNamedEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfIdEntries) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY),
            "::",
            stringify!(NumberOfIdEntries)
        )
    );
}
pub type IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY;
pub type PIMAGE_RESOURCE_DIRECTORY = *mut _IMAGE_RESOURCE_DIRECTORY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    pub DUMMYUNIONNAME1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1,
    pub DUMMYUNIONNAME2: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1 {
    pub DUMMYSTRUCTNAME1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub Name: DWORD,
    pub DUMMYSTRUCTNAME2: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1)
        )
    );
}
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn NameOffset(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_NameOffset(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn NameIsString(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NameIsString(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        NameOffset: ::std::os::raw::c_uint,
        NameIsString: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let NameOffset: u32 = unsafe { ::std::mem::transmute(NameOffset) };
            NameOffset as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let NameIsString: u32 = unsafe { ::std::mem::transmute(NameIsString) };
            NameIsString as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    pub Id: WORD,
    pub __pad: WORD,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(__pad)
        )
    );
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYSTRUCTNAME1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1),
            "::",
            stringify!(DUMMYSTRUCTNAME1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYSTRUCTNAME2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1),
            "::",
            stringify!(DUMMYSTRUCTNAME2)
        )
    );
}
impl Default for _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2 {
    pub OffsetToData: DWORD,
    pub DUMMYSTRUCTNAME3: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1)
        )
    );
}
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn OffsetToDirectory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_OffsetToDirectory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn DataIsDirectory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DataIsDirectory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        OffsetToDirectory: ::std::os::raw::c_uint,
        DataIsDirectory: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let OffsetToDirectory: u32 = unsafe { ::std::mem::transmute(OffsetToDirectory) };
            OffsetToDirectory as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let DataIsDirectory: u32 = unsafe { ::std::mem::transmute(DataIsDirectory) };
            DataIsDirectory as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OffsetToData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2),
            "::",
            stringify!(OffsetToData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYSTRUCTNAME3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2),
            "::",
            stringify!(DUMMYSTRUCTNAME3)
        )
    );
}
impl Default for _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_ENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_ENTRY> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>(),
        8usize,
        concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>(),
        4usize,
        concat!("Alignment of ", stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYUNIONNAME1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY),
            "::",
            stringify!(DUMMYUNIONNAME1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DUMMYUNIONNAME2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_ENTRY),
            "::",
            stringify!(DUMMYUNIONNAME2)
        )
    );
}
impl Default for _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub type PIMAGE_RESOURCE_DIRECTORY_ENTRY = *mut _IMAGE_RESOURCE_DIRECTORY_ENTRY;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    pub Length: WORD,
    pub NameString: [CHAR; 1usize],
}
#[test]
fn bindgen_test_layout__IMAGE_RESOURCE_DIRECTORY_STRING() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_RESOURCE_DIRECTORY_STRING> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>(),
        4usize,
        concat!("Size of: ", stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameString) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_RESOURCE_DIRECTORY_STRING),
            "::",
            stringify!(NameString)
        )
    );
}
pub type IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING;
pub type PIMAGE_RESOURCE_DIRECTORY_STRING = *mut _IMAGE_RESOURCE_DIRECTORY_STRING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB {
    pub ExceptionList: PVOID,
    pub StackBase: PVOID,
    pub StackLimit: PVOID,
    pub SubSystemTib: PVOID,
    pub Version: ULONG,
    pub UserPointer: PVOID,
    pub Self_: PVOID,
}
#[test]
fn bindgen_test_layout__NT_TIB() {
    const UNINIT: ::std::mem::MaybeUninit<_NT_TIB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_NT_TIB>(),
        56usize,
        concat!("Size of: ", stringify!(_NT_TIB))
    );
    assert_eq!(
        ::std::mem::align_of::<_NT_TIB>(),
        8usize,
        concat!("Alignment of ", stringify!(_NT_TIB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(ExceptionList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StackBase) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(StackBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StackLimit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(StackLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemTib) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(SubSystemTib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UserPointer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(UserPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Self_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_NT_TIB),
            "::",
            stringify!(Self_)
        )
    );
}
impl Default for _NT_TIB {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type NT_TIB = _NT_TIB;
pub type PNT_TIB = *mut _NT_TIB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLIENT_ID {
    pub UniqueProcess: PVOID,
    pub UniqueThread: PVOID,
}
#[test]
fn bindgen_test_layout__CLIENT_ID() {
    const UNINIT: ::std::mem::MaybeUninit<_CLIENT_ID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CLIENT_ID>(),
        16usize,
        concat!("Size of: ", stringify!(_CLIENT_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<_CLIENT_ID>(),
        8usize,
        concat!("Alignment of ", stringify!(_CLIENT_ID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniqueProcess) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIENT_ID),
            "::",
            stringify!(UniqueProcess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniqueThread) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CLIENT_ID),
            "::",
            stringify!(UniqueThread)
        )
    );
}
impl Default for _CLIENT_ID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CLIENT_ID = _CLIENT_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LIST_ENTRY {
    pub Flink: *mut _LIST_ENTRY,
    pub Blink: *mut _LIST_ENTRY,
}
#[test]
fn bindgen_test_layout__LIST_ENTRY() {
    const UNINIT: ::std::mem::MaybeUninit<_LIST_ENTRY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LIST_ENTRY>(),
        16usize,
        concat!("Size of: ", stringify!(_LIST_ENTRY))
    );
    assert_eq!(
        ::std::mem::align_of::<_LIST_ENTRY>(),
        8usize,
        concat!("Alignment of ", stringify!(_LIST_ENTRY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flink) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LIST_ENTRY),
            "::",
            stringify!(Flink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Blink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_LIST_ENTRY),
            "::",
            stringify!(Blink)
        )
    );
}
impl Default for _LIST_ENTRY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LIST_ENTRY = _LIST_ENTRY;
pub type PLIST_ENTRY = *mut _LIST_ENTRY;
pub type PRLIST_ENTRY = _LIST_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PEB_LDR_DATA {
    pub Length: ULONG,
    pub Initialized: BOOLEAN,
    pub SsHandle: PVOID,
    pub InLoadOrderModuleList: LIST_ENTRY,
    pub InMemoryOrderModuleList: LIST_ENTRY,
    pub InInitializationOrderModuleList: LIST_ENTRY,
}
#[test]
fn bindgen_test_layout__PEB_LDR_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<_PEB_LDR_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_PEB_LDR_DATA>(),
        64usize,
        concat!("Size of: ", stringify!(_PEB_LDR_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_PEB_LDR_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_PEB_LDR_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(Length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Initialized) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SsHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(SsHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InLoadOrderModuleList) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(InLoadOrderModuleList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InMemoryOrderModuleList) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(InMemoryOrderModuleList)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).InInitializationOrderModuleList) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB_LDR_DATA),
            "::",
            stringify!(InInitializationOrderModuleList)
        )
    );
}
impl Default for _PEB_LDR_DATA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PEB_LDR_DATA = _PEB_LDR_DATA;
pub type PPEB_LDR_DATA = *mut _PEB_LDR_DATA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PEB {
    pub InheritedAddressSpace: BOOLEAN,
    pub ReadImageFileExecOptions: BOOLEAN,
    pub BeingDebugged: BOOLEAN,
    pub SpareBool: BOOLEAN,
    pub Mutant: PVOID,
    pub ImageBaseAddress: PVOID,
    pub LdrData: PPEB_LDR_DATA,
    pub ProcessParameters: PVOID,
    pub SubSystemData: PVOID,
    pub ProcessHeap: PVOID,
    pub FastPebLock: PVOID,
    pub FastPebLockRoutine: PVOID,
    pub FastPebUnlockRoutine: PVOID,
    pub EnvironmentUpdateCount: ULONG,
    pub KernelCallbackTable: PVOID,
    pub EventLogSection: PVOID,
    pub EventLog: PVOID,
    pub FreeList: PVOID,
    pub TlsExpansionCounter: ULONG,
    pub TlsBitmap: PRTL_BITMAP,
    pub TlsBitmapBits: [ULONG; 2usize],
    pub ReadOnlySharedMemoryBase: PVOID,
    pub ReadOnlySharedMemoryHeap: PVOID,
    pub ReadOnlyStaticServerData: *mut PVOID,
    pub AnsiCodePageData: PVOID,
    pub OemCodePageData: PVOID,
    pub UnicodeCaseTableData: PVOID,
    pub NumberOfProcessors: ULONG,
    pub NtGlobalFlag: ULONG,
    pub Spare2: [BYTE; 4usize],
    pub CriticalSectionTimeout: LARGE_INTEGER,
    pub HeapSegmentReserve: ULONG,
    pub HeapSegmentCommit: ULONG,
    pub HeapDeCommitTotalFreeThreshold: ULONG,
    pub HeapDeCommitFreeBlockThreshold: ULONG,
    pub NumberOfHeaps: ULONG,
    pub MaximumNumberOfHeaps: ULONG,
    pub ProcessHeaps: *mut PVOID,
    pub GdiSharedHandleTable: PVOID,
    pub ProcessStarterHelper: PVOID,
    pub GdiDCAttributeList: PVOID,
    pub LoaderLock: PVOID,
    pub OSMajorVersion: ULONG,
    pub OSMinorVersion: ULONG,
    pub OSBuildNumber: ULONG,
    pub OSPlatformId: ULONG,
    pub ImageSubSystem: ULONG,
    pub ImageSubSystemMajorVersion: ULONG,
    pub ImageSubSystemMinorVersion: ULONG,
    pub ImageProcessAffinityMask: ULONG,
    pub GdiHandleBuffer: [ULONG; 34usize],
    pub PostProcessInitRoutine: ULONG,
    pub TlsExpansionBitmap: PRTL_BITMAP,
    pub TlsExpansionBitmapBits: [ULONG; 32usize],
    pub SessionId: ULONG,
}
#[test]
fn bindgen_test_layout__PEB() {
    const UNINIT: ::std::mem::MaybeUninit<_PEB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_PEB>(),
        600usize,
        concat!("Size of: ", stringify!(_PEB))
    );
    assert_eq!(
        ::std::mem::align_of::<_PEB>(),
        8usize,
        concat!("Alignment of ", stringify!(_PEB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InheritedAddressSpace) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(InheritedAddressSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadImageFileExecOptions) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ReadImageFileExecOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BeingDebugged) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(BeingDebugged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SpareBool) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(SpareBool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mutant) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(Mutant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageBaseAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ImageBaseAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LdrData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(LdrData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessParameters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ProcessParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubSystemData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(SubSystemData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessHeap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ProcessHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FastPebLock) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(FastPebLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FastPebLockRoutine) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(FastPebLockRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FastPebUnlockRoutine) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(FastPebUnlockRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnvironmentUpdateCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(EnvironmentUpdateCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KernelCallbackTable) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(KernelCallbackTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventLogSection) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(EventLogSection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EventLog) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(EventLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeList) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(FreeList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TlsExpansionCounter) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(TlsExpansionCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TlsBitmap) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(TlsBitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TlsBitmapBits) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(TlsBitmapBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadOnlySharedMemoryBase) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ReadOnlySharedMemoryBase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadOnlySharedMemoryHeap) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ReadOnlySharedMemoryHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReadOnlyStaticServerData) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ReadOnlyStaticServerData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnsiCodePageData) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(AnsiCodePageData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OemCodePageData) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(OemCodePageData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnicodeCaseTableData) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(UnicodeCaseTableData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfProcessors) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(NumberOfProcessors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NtGlobalFlag) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(NtGlobalFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Spare2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(Spare2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CriticalSectionTimeout) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(CriticalSectionTimeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HeapSegmentReserve) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(HeapSegmentReserve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HeapSegmentCommit) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(HeapSegmentCommit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HeapDeCommitTotalFreeThreshold) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(HeapDeCommitTotalFreeThreshold)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).HeapDeCommitFreeBlockThreshold) as usize - ptr as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(HeapDeCommitFreeBlockThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumberOfHeaps) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(NumberOfHeaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaximumNumberOfHeaps) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(MaximumNumberOfHeaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessHeaps) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ProcessHeaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GdiSharedHandleTable) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(GdiSharedHandleTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessStarterHelper) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ProcessStarterHelper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GdiDCAttributeList) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(GdiDCAttributeList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoaderLock) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(LoaderLock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OSMajorVersion) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(OSMajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OSMinorVersion) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(OSMinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OSBuildNumber) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(OSBuildNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OSPlatformId) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(OSPlatformId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageSubSystem) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ImageSubSystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageSubSystemMajorVersion) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ImageSubSystemMajorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageSubSystemMinorVersion) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ImageSubSystemMinorVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ImageProcessAffinityMask) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(ImageProcessAffinityMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GdiHandleBuffer) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(GdiHandleBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PostProcessInitRoutine) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(PostProcessInitRoutine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TlsExpansionBitmap) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(TlsExpansionBitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TlsExpansionBitmapBits) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(TlsExpansionBitmapBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SessionId) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(_PEB),
            "::",
            stringify!(SessionId)
        )
    );
}
impl Default for _PEB {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PEB = _PEB;
pub type PPEB = *mut _PEB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TEB {
    pub Tib: NT_TIB,
    pub EnvironmentPointer: PVOID,
    pub Cid: CLIENT_ID,
    pub ActiveRpcInfo: PVOID,
    pub ThreadLocalStoragePointer: PVOID,
    pub ProcessEnvironmentBlock: PPEB,
}
#[test]
fn bindgen_test_layout__TEB() {
    const UNINIT: ::std::mem::MaybeUninit<_TEB> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_TEB>(),
        104usize,
        concat!("Size of: ", stringify!(_TEB))
    );
    assert_eq!(
        ::std::mem::align_of::<_TEB>(),
        8usize,
        concat!("Alignment of ", stringify!(_TEB))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tib) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_TEB), "::", stringify!(Tib))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnvironmentPointer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TEB),
            "::",
            stringify!(EnvironmentPointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Cid) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(_TEB), "::", stringify!(Cid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ActiveRpcInfo) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TEB),
            "::",
            stringify!(ActiveRpcInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThreadLocalStoragePointer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TEB),
            "::",
            stringify!(ThreadLocalStoragePointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ProcessEnvironmentBlock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TEB),
            "::",
            stringify!(ProcessEnvironmentBlock)
        )
    );
}
impl Default for _TEB {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type TEB = _TEB;
pub type PTEB = *mut _TEB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY {
    pub RawDataStart: PVOID,
    pub RawDataEnd: PVOID,
    pub AddressOfIndex: PDWORD,
    pub AddressOfCallbacks: PVOID,
    pub SizeOfZeroFill: DWORD,
    pub Characteristics: DWORD,
}
#[test]
fn bindgen_test_layout__IMAGE_TLS_DIRECTORY() {
    const UNINIT: ::std::mem::MaybeUninit<_IMAGE_TLS_DIRECTORY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IMAGE_TLS_DIRECTORY>(),
        40usize,
        concat!("Size of: ", stringify!(_IMAGE_TLS_DIRECTORY))
    );
    assert_eq!(
        ::std::mem::align_of::<_IMAGE_TLS_DIRECTORY>(),
        8usize,
        concat!("Alignment of ", stringify!(_IMAGE_TLS_DIRECTORY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawDataStart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(RawDataStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawDataEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(RawDataEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(AddressOfIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddressOfCallbacks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(AddressOfCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SizeOfZeroFill) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(SizeOfZeroFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Characteristics) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IMAGE_TLS_DIRECTORY),
            "::",
            stringify!(Characteristics)
        )
    );
}
impl Default for _IMAGE_TLS_DIRECTORY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IMAGE_TLS_DIRECTORY = _IMAGE_TLS_DIRECTORY;
pub type PIMAGE_TLS_DIRECTORY = *mut _IMAGE_TLS_DIRECTORY;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct user_desc {
    pub entry_number: ::std::os::raw::c_uint,
    pub base_addr: ::std::os::raw::c_ulong,
    pub limit: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_user_desc() {
    const UNINIT: ::std::mem::MaybeUninit<user_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<user_desc>(),
        24usize,
        concat!("Size of: ", stringify!(user_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<user_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(user_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(user_desc),
            "::",
            stringify!(entry_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(user_desc),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(user_desc),
            "::",
            stringify!(limit)
        )
    );
}
impl user_desc {
    #[inline]
    pub fn seg_32bit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_32bit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn contents(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_contents(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn read_exec_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_exec_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_in_pages(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_in_pages(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_not_present(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_not_present(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn useable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_useable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        seg_32bit: ::std::os::raw::c_uint,
        contents: ::std::os::raw::c_uint,
        read_exec_only: ::std::os::raw::c_uint,
        limit_in_pages: ::std::os::raw::c_uint,
        seg_not_present: ::std::os::raw::c_uint,
        useable: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let seg_32bit: u32 = unsafe { ::std::mem::transmute(seg_32bit) };
            seg_32bit as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let contents: u32 = unsafe { ::std::mem::transmute(contents) };
            contents as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let read_exec_only: u32 = unsafe { ::std::mem::transmute(read_exec_only) };
            read_exec_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let limit_in_pages: u32 = unsafe { ::std::mem::transmute(limit_in_pages) };
            limit_in_pages as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let seg_not_present: u32 = unsafe { ::std::mem::transmute(seg_not_present) };
            seg_not_present as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let useable: u32 = unsafe { ::std::mem::transmute(useable) };
            useable as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type generic_func = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wrap_export {
    pub name: *const ::std::os::raw::c_char,
    pub func: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wrap_export() {
    const UNINIT: ::std::mem::MaybeUninit<wrap_export> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wrap_export>(),
        16usize,
        concat!("Size of: ", stringify!(wrap_export))
    );
    assert_eq!(
        ::std::mem::align_of::<wrap_export>(),
        8usize,
        concat!("Alignment of ", stringify!(wrap_export))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_export),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wrap_export),
            "::",
            stringify!(func)
        )
    );
}
impl Default for wrap_export {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pe_image {
    pub name: [::std::os::raw::c_char; 128usize],
    pub entry: ::std::option::Option<
        unsafe extern "C" fn(hinstDLL: PVOID, fdwReason: DWORD, lpvReserved: PVOID) -> BOOL,
    >,
    pub image: *mut ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub nt_hdr: *mut IMAGE_NT_HEADERS,
    pub opt_hdr: *mut IMAGE_OPTIONAL_HEADER,
}
#[test]
fn bindgen_test_layout_pe_image() {
    const UNINIT: ::std::mem::MaybeUninit<pe_image> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pe_image>(),
        168usize,
        concat!("Size of: ", stringify!(pe_image))
    );
    assert_eq!(
        ::std::mem::align_of::<pe_image>(),
        8usize,
        concat!("Alignment of ", stringify!(pe_image))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt_hdr) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(nt_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_hdr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(pe_image),
            "::",
            stringify!(opt_hdr)
        )
    );
}
impl Default for pe_image {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ntos_work_item {
    pub list: nt_list,
    pub arg1: *mut ::std::os::raw::c_void,
    pub arg2: *mut ::std::os::raw::c_void,
    pub func: NTOS_WORK_FUNC,
}
#[test]
fn bindgen_test_layout_ntos_work_item() {
    const UNINIT: ::std::mem::MaybeUninit<ntos_work_item> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ntos_work_item>(),
        40usize,
        concat!("Size of: ", stringify!(ntos_work_item))
    );
    assert_eq!(
        ::std::mem::align_of::<ntos_work_item>(),
        8usize,
        concat!("Alignment of ", stringify!(ntos_work_item))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ntos_work_item),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ntos_work_item),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ntos_work_item),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ntos_work_item),
            "::",
            stringify!(func)
        )
    );
}
impl Default for ntos_work_item {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hw_status_HW_INITIALIZED: hw_status = 1;
pub const hw_status_HW_SUSPENDED: hw_status = 2;
pub const hw_status_HW_HALTED: hw_status = 3;
pub const hw_status_HW_DISABLED: hw_status = 4;
pub type hw_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct workqueue_struct {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut ntos_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut ndis_wq: *mut workqueue_struct;
}
extern "C" {
    pub static mut wrapndis_wq: *mut workqueue_struct;
}
extern "C" {
    pub fn pe_load_library(
        filename: *const ::std::os::raw::c_char,
        image: *mut *mut ::std::os::raw::c_void,
        size: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn get_export_address(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn link_pe_images(
        pe_image: *mut pe_image,
        n: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_export(
        name: *const ::std::os::raw::c_char,
        func: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_data_export(
        name: *mut ::std::os::raw::c_char,
        base: u32,
        result: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setup_nt_threadinfo(handler: PEXCEPTION_HANDLER) -> bool;
}
extern "C" {
    pub fn setup_kuser_shared_data() -> bool;
}
extern "C" {
    pub fn process_extra_exports(
        imagebase: *mut ::std::os::raw::c_void,
        base: usize,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub static mut SharedUserData: PKUSER_SHARED_DATA;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct task_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct urb {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct wrap_device {
    pub _address: u8,
}
